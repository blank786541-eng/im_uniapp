import { NIM } from 'nim-web-sdk-ng/dist/esm/nim';
import { V2NIMAIModelCallContent, V2NIMAIUser, V2NIMProxyAIModelCallParams } from 'nim-web-sdk-ng/dist/esm/nim/src/V2NIMAIService';
import RootStore from 'src';
import { AIUserServerExt, LocalOptions } from './types';
import * as storeUtils from './utils';
export declare class AIUserStore {
    private rootStore;
    private nim;
    private localOptions;
    aiUsers: Map<string, V2NIMAIUser>;
    aiReqMsgs: V2NIMAIModelCallContent[];
    aiResMsgs: string[];
    logger: typeof storeUtils.logger | null;
    onSendAIProxyErrorHandler: (errorCode: number) => void;
    private requestIds;
    private proxyAccountId;
    constructor(rootStore: RootStore, nim: NIM, localOptions: LocalOptions);
    get aiProxying(): boolean;
    resetState(): void;
    /**
     * 销毁 AIUserStore，会取消相关事件监听
     */
    destroy(): void;
    /** 内存中增加 AIUsers */
    addAIUsers(aiUsers: V2NIMAIUser[]): void;
    /** 内存中删除 AIUsers */
    removeAIUsers(accounts: string[]): void;
    /**
     * 获取 AIUsers
     */
    getAIUserList(accountIds?: string[]): V2NIMAIUser[];
    /**
     * 获取 AI 划词数字人
     */
    getAISearchUser(): V2NIMAIUser | void;
    /**
     * 获取 AI 翻译数字人
     */
    getAITranslateUser(): V2NIMAIUser | void;
    /**
     * 获取 AI 翻译语言
     */
    getAITranslateLangs(): string[];
    /**
     * 获取 AI 数字人的 serverExtension
     */
    getAIUserServerExt(accountId: string): AIUserServerExt;
    /**
     * 获取 AI 聊数字人，AI 聊是指可以被 @ 的数字人
     */
    getAIChatUser(): V2NIMAIUser[];
    /**
     * 获取配置过默认置顶的数字人，仅代表配置过，不代表当前置顶
     */
    getAIPinDefaultUser(): V2NIMAIUser[];
    /**
     * 获取当前置顶的数字人
     */
    getAIPinUser(): V2NIMAIUser[];
    /**
     * 判断一个数字人是否 pin 置顶
     */
    isAIPinUser(accountId: string): boolean;
    /**
     * 判断是否正在 AI 划词中
     */
    isAISearching(): boolean;
    /**
     * 判断是否正在 AI 翻译中
     */
    isAITranslating(): boolean;
    /**
     * 判断是否AI数字人
     */
    isAIUser(accountId: string): boolean;
    /**
     * 重置 AI 代理状态
     */
    resetAIProxy(): void;
    /**
     * 从 sdk 获取 AI 数字人列表并维护到内存中
     */
    getAIUserListActive(): Promise<void>;
    /**
     * 发送 AI 代理请求
     * @params requestId 请求 ID，用于区分不同的请求，传就表示新的请求，不传表示继续上次的请求
     */
    sendAIProxyActive(params: Omit<V2NIMProxyAIModelCallParams, 'requestId'> & {
        requestId?: string;
        onSendAIProxyErrorHandler?: (errorCode: number) => void;
    }): Promise<void>;
    private _onProxyAIModelCall;
}
