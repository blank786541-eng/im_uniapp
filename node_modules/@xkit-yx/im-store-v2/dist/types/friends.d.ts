import RootStore from '.';
import { NIM } from 'nim-web-sdk-ng/dist/esm/nim';
import { V2NIMFriend, V2NIMFriendAddApplication, V2NIMFriendAddApplicationQueryOption, V2NIMFriendAddApplicationResult, V2NIMFriendAddParams, V2NIMFriendSetParams } from 'nim-web-sdk-ng/dist/esm/nim/src/V2NIMFriendService';
import * as storeUtils from './utils';
/**Mobx 可观察对象，负责管理好友信息的子 store */
export declare class FriendStore {
    private rootStore;
    private nim;
    friends: Map<string, V2NIMFriend>;
    logger: typeof storeUtils.logger | null;
    constructor(rootStore: RootStore, nim: NIM);
    resetState(): void;
    /**
     * 销毁FriendStore，会取消好友事件监听
     */
    destroy(): void;
    /**
     * 查询好友列表
     */
    getFriendListActive(): Promise<V2NIMFriend[]>;
    /**
     * 根据Id 查询好友信息
     */
    getFriendByIdsActive(ids: string[]): Promise<V2NIMFriend[]>;
    /**
     * 获取申请添加好友列表通知
     * @param options V2NIMFriendAddApplicationQueryOption
     */
    getAddApplicationListActive(options: V2NIMFriendAddApplicationQueryOption): Promise<V2NIMFriendAddApplicationResult>;
    /**
     * 添加好友申请
     * @param accountId 账号
     * @param params 添加好友的配置参数
     */
    addFriendActive(accountId: string, params: V2NIMFriendAddParams): Promise<void>;
    /**
     * 接受好友申请
     * @param application 申请添加好友的相关信息
     */
    acceptAddApplicationActive(application: V2NIMFriendAddApplication): Promise<void>;
    /**
     * 拒绝好友申请
     * @param application 申请添加好友的相关信息
     * @param postscript 拒绝好友申请的附言
     */
    rejectAddApplicationActive(application: V2NIMFriendAddApplication, postscript?: string): Promise<void>;
    /**
     * 删除好友
     * @param accountId 账号
     */
    deleteFriendActive(accountId: string): Promise<void>;
    /**
     * 更新好友信息
     * @param accountId 账号
     * @param params 设置好友信息的配置参数。
     */
    setFriendInfoActive(accountId: string, params: V2NIMFriendSetParams): Promise<void>;
    /**
     * 内存中增加好友
     * @param data - 好友数组
     */
    addFriend(data: V2NIMFriend[]): void;
    /**
     * 内存中删除好友
     * @param data - 好友数组
     */
    removeFriend(accounts: string[]): void;
    /**
     * 监听添加好友
     */
    private _onFriendAdded;
    /**
     * 监听删除好友
     */
    private _onFriendDeleted;
    /**
     * 申请添加好友的相关信息，其他端向本端发送好友申请,会触发该事件
     */
    private _onFriendAddApplication;
    /**
     * 对端拒绝本端好友申请，本端会触发该事件
     */
    private _onFriendAddRejected;
    /**
     * 好友信息更新回调，返回变更的好友信息，包括本端直接更新的好友信息和其他端同步更新的好友信息
     */
    private _onFriendInfoChanged;
}
