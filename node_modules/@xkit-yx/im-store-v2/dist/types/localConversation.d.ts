import RootStore from '.';
import { NIM } from 'nim-web-sdk-ng/dist/esm/nim';
import { V2NIMLocalConversationResult } from 'nim-web-sdk-ng/dist/esm/nim/src/V2NIMLocalConversationService';
import { V2NIMConversationType } from 'nim-web-sdk-ng/dist/esm/nim/src/V2NIMConversationService';
import { V2NIMMessage, V2NIMP2PMessageReadReceipt } from 'nim-web-sdk-ng/dist/esm/nim/src/V2NIMMessageService';
import { V2NIMLocalConversationForUI } from './types';
import * as storeUtils from './utils';
/**Mobx 可观察对象，负责管理本地会话列表的子 store */
export declare class LocalConversationStore {
    private rootStore;
    private nim;
    conversations: Map<string, V2NIMLocalConversationForUI>;
    totalUnreadCount: number;
    logger: typeof storeUtils.logger | null;
    constructor(rootStore: RootStore, nim: NIM);
    resetState(): void;
    /**
     * 销毁
     */
    destroy(): void;
    /**
     * 添加内存中的会话
     * @param conversations 会话数组
     */
    addConversation(conversations: V2NIMLocalConversationForUI[]): void;
    /**
     * 更新内存中的会话
     * @param conversations 会话数组
     */
    updateConversation(conversations: V2NIMLocalConversationForUI[]): void;
    /**
     * 移除内存中的会话
     * @param conversationId 会话ID
     */
    removeConversation(conversationIds: string[]): void;
    /**
     * 重置会话未读数
     * @param conversationId - 消息所属的会话的ID
     */
    resetConversation(conversationId: string): Promise<void>;
    /**
     * 插入一条会话记录
     * @param conversationType
     * @param receiverId - 接收方, 对方帐号或者群id
     * @param isSelected - 是否选中
     */
    insertConversationActive(conversationType: V2NIMConversationType, receiverId: string, isSelected?: boolean): Promise<void>;
    /**
     * 删除会话记录
     * @param conversationId - 消息所属的会话的ID
     */
    deleteConversationActive(conversationId: string): Promise<void>;
    /**
     * 新增会话置顶
     * @param conversationId - 消息所属的会话的ID
     * @param stickTop - 是否置顶
     */
    stickTopConversationActive(conversationId: string, stickTop: boolean): Promise<void>;
    /**
     * 获取会话列表
     * @param offset 分页偏移量
     * @param limit 分页拉取数量
     */
    getConversationListActive(offset: number, limit: number): Promise<V2NIMLocalConversationResult>;
    getP2PMessageReceipt(conversationIds: string[]): Promise<V2NIMP2PMessageReadReceipt[]>;
    private _resetMemoryConversationUnreadCount;
    /**
     * 获取会话已读时间戳。该时间包含多端已读时间戳
     */
    getConversationReadTimeActive(conversationId: string): Promise<number>;
    /**
     * 标记会话已读时间戳
     *
     * 注: 当该方法调用后，SDK 可能给多端账户抛出以下的事件
     *
     * {@link V2NIMConversationListener.onConversationReadTimeUpdated | V2NIMConversationListener.onConversationReadTimeUpdated} <br/>
     *
     */
    markConversationReadActive(conversationId: string): Promise<number>;
    handleConversationWithAit(msgs: V2NIMMessage[]): void;
    resetConversationAit(conversationId: string): void;
    private hasAitMsg;
    private _onSyncStarted;
    private _onSyncFinished;
    private _onSyncFailed;
    private _onConversationCreated;
    private _onConversationDeleted;
    private _onConversationChanged;
    private _onTotalUnreadCountChanged;
}
