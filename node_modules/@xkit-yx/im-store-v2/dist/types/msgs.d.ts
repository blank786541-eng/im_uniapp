import RootStore from '.';
import { LocalOptions, V2NIMMessageForUI } from './types';
import { QueueMap } from './queueMap';
import { NIM } from 'nim-web-sdk-ng/dist/esm/nim';
import { V2NIMCollectionOption, V2NIMAddCollectionParams, V2NIMCollection, V2NIMMessage, V2NIMMessageAIConfigParams, V2NIMMessageRefer, V2NIMSendMessageParams, V2NIMTeamMessageReadReceiptDetail, V2NIMMessageAIStreamStopParams, V2NIMMessageAIRegenParams } from 'nim-web-sdk-ng/dist/esm/nim/src/V2NIMMessageService';
import * as storeUtils from './utils';
import PinMsgsMap, { PinInfo, PinInfos } from './pinMsgsMap';
import { V2NIMConversationType } from 'nim-web-sdk-ng/dist/esm/nim/src/V2NIMConversationService';
/**Mobx 可观察对象，负责管理会话消息的子 store */
export declare class MsgStore {
    private rootStore;
    private nim;
    private localOptions;
    msgs: QueueMap<V2NIMMessageForUI>;
    /** 回复消息 */
    replyMsgs: Map<string, V2NIMMessage>;
    logger: typeof storeUtils.logger | null;
    /** pin 消息 */
    pinMsgs: PinMsgsMap;
    /** 收藏消息 */
    collectionMsgs: Map<string, V2NIMMessage>;
    constructor(rootStore: RootStore, nim: NIM, localOptions: LocalOptions);
    resetState(): void;
    /**
     * 销毁MsgStore，会取消消息相关事件监听
     */
    destroy(): void;
    /**
     * 回复消息
     * @param msg 消息对象
     */
    replyMsgActive(msg: V2NIMMessage): void;
    /**
     * 回复消息
     * @param msg 消息对象
     */
    removeReplyMsgActive(conversationId: string): void;
    /**
     * 获取回复消息
     * @param conversationId
     * @returns
     */
    getReplyMsgActive(conversationId: string): V2NIMMessage | void;
    /**
     * 撤回消息
     * @param msg 消息对象
     */
    reCallMsgActive(msg: V2NIMMessage): Promise<void>;
    /**
     * 单向删除消息
     * @param msgs 消息对象数组
     */
    deleteMsgActive(msgs: V2NIMMessage[]): Promise<void>;
    /**
     * 回复消息
     * @param msgs 消息对象
     * @param repliedMessages 被回复的消息对象
     * @param conversationId 会话id
     */
    replyMessageByThreadActive(message: V2NIMMessage, repliedMessage: V2NIMMessage, conversationId: string, params?: V2NIMSendMessageParams): Promise<void>;
    /**
     * 发送消息
     * @param __namedParameters.msg - 消息对象
     * @param __namedParameters.conversationId - 会话id
     * @param __namedParameters.conversationType - 会话类型
     * @param __namedParameters.progress - progress 进度回调
     * @param __namedParameters.sendBefore - sendBefore 进度回调
     * @param __namedParameters.serverExtension - 扩展字段
     * @param __namedParameters.previewImg - 预览图片，一般用于发送图片和视频消息
     * @param __namedParameters.onAISend - AI 单聊或 at AI 发送成功后的回调
     */
    sendMessageActive(params: {
        msg: V2NIMMessage;
        conversationId: string;
        conversationType?: V2NIMConversationType;
        progress?: (percentage: number) => boolean;
        sendBefore?: (msg: V2NIMMessageForUI) => void;
        serverExtension?: Record<string, unknown>;
        previewImg?: string;
        onAISend?: (msg: V2NIMMessageForUI, aiConfig: V2NIMMessageAIConfigParams) => void;
    }): Promise<V2NIMMessage | void>;
    /**
     * 取消上传
     * @param msg 消息对象
     */
    cancelMessageAttachmentUploadActive(msg: V2NIMMessage): Promise<void>;
    /**
     * 发送 p2p 消息已读回执
     * @param msg 消息对象
     */
    sendMsgReceiptActive(msg: V2NIMMessage): Promise<void>;
    /**
     * 添加一个收藏
     * @param params 添加收藏的相关参数
     */
    addCollectionActive(params: V2NIMAddCollectionParams): Promise<void>;
    /**
     * 移除相关收藏
     * @param collections 需要移除的相关收藏
     */
    removeCollectionsActive(collections: V2NIMCollection[]): Promise<void>;
    /**
     * 获取收藏列表
     * @param option 查询参数
     */
    getCollectionListByOptionActive(option: V2NIMCollectionOption): Promise<Array<V2NIMCollection>>;
    /**
     * 发送群组消息已读回执
     * @param msgs 消息数组
     */
    sendTeamMsgReceiptActive(msgs: V2NIMMessage[]): Promise<void>;
    /**
     * 获取群消息已读未读详情
     * @param message 消息
     */
    getTeamMessageReceiptDetailsActive(message: V2NIMMessage, memberAccountIds?: string[]): Promise<V2NIMTeamMessageReadReceiptDetail>;
    /**
     * 获取历史消息
     * @param options.conversationId - 消息所属的会话的ID
     * @param options.endTime - 结束时间戳, 精确到 ms, 默认为服务器的当前时间
     * @param options.lastMsgId - 上次查询的最后一条消息的 messageServerId, 第一次不填
     * @param options.limit - 本次查询的消息数量限制, 最多 100 条, 默认 100 条
     */
    getHistoryMsgActive(options: {
        conversationId: string;
        endTime: number;
        lastMsgId?: string;
        limit: number;
    }): Promise<V2NIMMessage[]>;
    /**
     * 转发消息
     * @param msg - 消息对象
     * @param conversationId - 会话id
     * @param comment - 评论
     */
    forwardMsgActive(msg: V2NIMMessageForUI, conversationId: string, comment?: string): Promise<void>;
    /**
     * 获取群组消息已读未读数
     * @param msgs 消息数组
     * @param conversationId 会话id
     */
    getTeamMsgReadsActive(msgs: V2NIMMessage[], conversationId: string): Promise<void>;
    /**
     * pin 一条消息
     * @param message 需要被 pin 的消息体
     * @param serverExtension 扩展字段
     */
    pinMessageActive(message: V2NIMMessage, serverExtension?: string): Promise<void>;
    /**
     * 取消一条Pin消息
     * @param messageRefer 需要被取消 pin 的消息摘要
     * @param serverExtension 扩展字段
     */
    unpinMessageActive(messageRefer: V2NIMMessageRefer, serverExtension?: string): Promise<void>;
    /**
     * 取消一条Pin消息
     * @param messageRefer 需要被取消 pin 的消息摘要
     * @param serverExtension 扩展字段
     */
    updatePinMessageActive(message: V2NIMMessage, serverExtension?: string): Promise<void>;
    /**
     * 获取 pin 消息列表
     * @param conversationId 会话id
     */
    getPinnedMessageListActive(conversationId: string): Promise<PinInfos>;
    /**
     * 停止流式输出
     * @param message 消息体
     * @param params 停止模式等入参
     */
    stopAIStreamMessageActive(message: V2NIMMessage, params: V2NIMMessageAIStreamStopParams): Promise<void>;
    /**
     * 重新生成 ai 消息
     *
     * 注: 若是流式消息, 必须等到流式分片输出完毕, 才允许调用此 API
     *
     * 此外他支持两种配置
     *
     * 1. 更新，新消息覆盖老消息---只允许更新3天内的消息
     * 2. 新消息，产生一条新消息
     *
     * @param message 需要重新输出的原始数字人消息
     * @param params 确定重新输出的操作类型
     */
    regenAIMessageActive(message: V2NIMMessage, params: V2NIMMessageAIRegenParams): Promise<void>;
    voiceToTextActive(message: V2NIMMessageForUI): Promise<void>;
    /**
     * 往内存中添加消息
     * @param conversationId - 消息所属的会话的ID
     * @param msgs- 消息对象数组
     */
    addMsg(conversationId: string, msgs: V2NIMMessageForUI[]): void;
    /**
     * 从内存中删除消息
     * @param conversationId - 消息所属的会话的ID
     * @param idClients - 端测生成的消息id数组
     */
    removeMsg(conversationId?: string, idClients?: string[]): void;
    deletePinInfoByMessageClientId(conversationId: string, messageClientIds: string[]): void;
    /**
     * 从内存中获取消息
     * @param conversationId - 消息所属的会话的ID
     * @param idClients - 端测生成的消息id数组
     */
    getMsg(conversationId?: string, idClients?: string[]): V2NIMMessageForUI[];
    updateMsg(conversationId: string, idClient: string, updateParam: Partial<V2NIMMessageForUI>): void;
    handleReceiveAIMsg(msg: V2NIMMessageForUI): V2NIMMessageForUI;
    /** 处理消息的 pinState */
    handleMsgPinState(msg: V2NIMMessageForUI, curPinMsgsMap: Map<string, PinInfo>): V2NIMMessageForUI;
    handleMsgForSDK(msg: V2NIMMessageForUI): V2NIMMessage;
    private _getMessageListByRefer;
    /** 从服务器拉 pin 消息列表 */
    private _getPinnedMessageListByServer;
    /** 补全被 pin 的消息 */
    private completePinnedMessageList;
    private _handleSendMsgSuccess;
    private _handleSendMsgFail;
    private _handleClearMsgTimer;
    private _onReceiveMessages;
    private _onReceiveMessagesModified;
    private _onClearHistoryNotifications;
    private _onMessageDeletedNotifications;
    private _onMessagePinNotification;
    private _updateMsgsPinState;
    private _onMessageQuickCommentNotification;
    private _onMessageRevokeNotifications;
    private _onReceiveP2PMessageReadReceipts;
    private _onReceiveTeamMessageReadReceipts;
    private _formatExtField;
    private _updateReceiptMsg;
    private _formatExtAitToPushInfo;
    private _createReCallMsg;
    private _createBeReCallMsg;
    private _getAIConfig;
    private _findMinStart;
}
