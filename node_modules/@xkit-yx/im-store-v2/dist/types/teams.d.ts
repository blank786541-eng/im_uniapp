import RootStore from '.';
import { LocalOptions } from './types';
import { NIM, V2NIMConst } from 'nim-web-sdk-ng/dist/esm/nim';
import { V2NIMTeam, V2NIMTeamAgreeMode, V2NIMTeamChatBannedMode, V2NIMTeamInviteMode, V2NIMTeamJoinActionInfo, V2NIMTeamJoinActionInfoQueryOption, V2NIMTeamJoinActionInfoResult, V2NIMTeamJoinMode, V2NIMTeamMemberRole, V2NIMTeamType, V2NIMTeamUpdateExtensionMode, V2NIMTeamUpdateInfoMode, V2NIMUpdateTeamInfoParams } from 'nim-web-sdk-ng/dist/esm/nim/src/V2NIMTeamService';
import * as storeUtils from './utils';
/**Mobx 可观察对象，负责管理群组的子 store */
export declare class TeamStore {
    private rootStore;
    private nim;
    private localOptions;
    teams: Map<string, V2NIMTeam>;
    logger: typeof storeUtils.logger | null;
    constructor(rootStore: RootStore, nim: NIM, localOptions: LocalOptions);
    resetState(): void;
    /**
     * 销毁TeamStore，会取消群组相关事件监听
     */
    destroy(): void;
    /**
     * TeamStore 内存中增加群组
     * @param teams - 群组
     */
    addTeam(teams: V2NIMTeam[]): void;
    /**
     * TeamStore 内存中移除群组
     * @param teamIds - 群id数组
     */
    removeTeam(teamIds: string[]): void;
    /**
     * TeamStore 内存中更新群组
     * @param data - 群组信息
     */
    updateTeam(data: Partial<V2NIMTeam>[]): void;
    /**
     * 创建群
     * @param __namedParameters.accounts - 要拉进群的成员的帐号列表
     * @param __namedParameters.type - 群类型，默认高级群
     * @param __namedParameters.avatar - 群头像
     * @param __namedParameters.name - 群名称
     * @param __namedParameters.intro - 群简介
     * @param __namedParameters.serverExtension - 群扩展字段
     */
    createTeamActive({ accounts, type, avatar, name, intro, serverExtension, joinMode, agreeMode, inviteMode, updateInfoMode, updateExtensionMode, }: {
        accounts: string[];
        type?: V2NIMTeamType;
        avatar: string;
        name: string;
        intro?: V2NIMTeam['intro'];
        serverExtension?: V2NIMTeam['serverExtension'];
        joinMode?: V2NIMTeamJoinMode;
        agreeMode?: V2NIMTeamAgreeMode;
        inviteMode?: V2NIMTeamInviteMode;
        updateInfoMode?: V2NIMTeamUpdateInfoMode;
        updateExtensionMode?: V2NIMTeamUpdateExtensionMode;
    }): Promise<V2NIMTeam>;
    /**
     * 申请入群
     * @param teamId - 群id
     * @param type - 群类型，默认高级群
     */
    applyTeamActive(teamId: string, type?: V2NIMTeamType): Promise<V2NIMTeam>;
    /**
     * 主动退群
     * @param teamId - 群id
     * @param type - 群类型，默认高级群
     */
    leaveTeamActive(teamId: string, type?: V2NIMTeamType): Promise<void>;
    /**
     * 解散群
     * @param teamId - 群id
     * @param type - 群类型，默认高级群
     */
    dismissTeamActive(teamId: string, type?: V2NIMTeamType): Promise<void>;
    /**
     * 转让群主
     * @param teamId - 群id
     * @param type - 群类型，默认高级群
     * @param account - 新群主帐号
     * @param leave - 是否同时退出群聊，默认 false
     */
    transferTeamActive({ teamId, type, account, leave, }: {
        teamId: string;
        type?: V2NIMTeamType;
        account: string;
        leave?: boolean;
    }): Promise<void>;
    /**
     * 群禁言
     * @param options
     * options.teamId - 群id <br>
     * options.type - 群类型，默认高级群 <br>
     * options.chatBannedMode - 禁言模式
     */
    setTeamChatBannedActive(options: {
        teamId: string;
        type?: V2NIMTeamType;
        chatBannedMode: V2NIMTeamChatBannedMode;
    }): Promise<void>;
    /**
     * 更新群
     * @param options
     * options.teamId - 群id <br>
     * options.type - 群类型，默认高级群  <br>
     * options.info - 群信息 <br>
     */
    updateTeamActive(options: {
        teamId: string;
        type?: V2NIMTeamType;
        info: V2NIMUpdateTeamInfoParams;
    }): Promise<void>;
    /**
     * 从内存中获取群信息
     * @param teamId - 群id
     * @param type - 群类型，默认高级群
     */
    getTeamActive(teamId: string, type?: V2NIMTeamType): Promise<V2NIMTeam>;
    /**
     * 从服务端获取群信息
     * @param teamId - 群id
     * @param type - 群类型，默认高级群
     */
    getTeamForceActive(teamId: string, type?: V2NIMTeamType): Promise<V2NIMTeam>;
    /**
     * 设置群消息免打扰
     * @param teamId - 群id
     * @param teamType - 群类型，默认高级群
     * @param muteMode - 消息免打扰模式
     */
    setTeamMessageMuteModeActive(teamId: string, teamType: V2NIMTeamType, muteMode: V2NIMConst.V2NIMTeamMessageMuteMode): Promise<void>;
    /**
     * 被邀请者接受入群邀请
     * @param options V2NIMTeamJoinActionInfo
     */
    acceptTeamInviteActive(options: V2NIMTeamJoinActionInfo): Promise<void>;
    /**
     * 被邀请者拒绝入群邀请
     * @param options V2NIMTeamJoinActionInfo
     */
    rejectTeamInviteActive(options: V2NIMTeamJoinActionInfo): Promise<void>;
    /**
     * 管理员通过入群申请
     * @param options V2NIMTeamJoinActionInfo
     */
    acceptJoinApplicationActive(options: V2NIMTeamJoinActionInfo): Promise<void>;
    /**
     * 管理员拒绝入群申请
     * @param options V2NIMTeamJoinActionInfo
     */
    rejectTeamApplyActive(options: V2NIMTeamJoinActionInfo): Promise<void>;
    /**
     * 设置成员角色
     * @param options
     * options.teamId - 群id <br>
     * options.type - 群类型，默认高级群 <br>
     * options.accounts - 群管理员 accid
     * options.role - 角色
     */
    updateTeamMemberRoleActive(options: {
        teamId: string;
        type?: V2NIMTeamType;
        accounts: string[];
        role: V2NIMTeamMemberRole;
    }): Promise<void>;
    /** 获取群组申请动作信息 */
    getTeamJoinActionInfoListActive(options: V2NIMTeamJoinActionInfoQueryOption): Promise<V2NIMTeamJoinActionInfoResult>;
    /** 获取已加入的群组列表 */
    getJoinedTeamListActive(): Promise<V2NIMTeam[]>;
    /**
     * 获取群消息免打扰状态
     * @param teamId - 群id <br>
     * @param teamType - 群组类型，包括高级群和超大群。 <br>
     */
    getTeamMessageMuteModeActive(teamId: any, teamType: V2NIMTeamType): Promise<V2NIMConst.V2NIMTeamMessageMuteMode>;
    private _onReceiveTeamJoinActionInfo;
    private _onSyncFailed;
    private _onSyncFinished;
    private _onSyncStarted;
    private _onTeamCreated;
    private _onTeamDismissed;
    private _onTeamInfoUpdated;
    private _onTeamJoined;
    private _onTeamLeft;
    private _onTeamMemberInfoUpdated;
    private _onTeamMemberJoined;
    private _onTeamMemberKicked;
    private _onTeamMemberLeft;
    private _handleRemoveTeam;
    private _onTeamMessageMuteModeChanged;
}
