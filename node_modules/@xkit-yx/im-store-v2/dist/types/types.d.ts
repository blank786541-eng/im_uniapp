import { V2NIMMessage, V2NIMSendMessageParams } from 'nim-web-sdk-ng/dist/esm/nim/src/V2NIMMessageService';
import { V2NIMTeamAgreeMode, V2NIMTeamInviteMode, V2NIMTeamJoinActionInfo, V2NIMTeamJoinMode, V2NIMTeamUpdateExtensionMode, V2NIMTeamUpdateInfoMode } from 'nim-web-sdk-ng/dist/esm/nim/src/V2NIMTeamService';
import { V2NIMFriendAddApplication } from 'nim-web-sdk-ng/dist/esm/nim/src/V2NIMFriendService';
import { V2NIMConversation } from 'nim-web-sdk-ng/dist/esm/nim/src/V2NIMConversationService';
import { V2NIMAIUser } from 'nim-web-sdk-ng/dist/esm/nim/src/V2NIMAIService';
import { V2NIMConst } from 'nim-web-sdk-ng/dist/esm/nim';
import { V2NIMLocalConversation } from 'nim-web-sdk-ng/dist/esm/nim/src/V2NIMLocalConversationService';
export interface V2NIMConversationForUI extends V2NIMConversation {
    msgReceiptTime?: number;
    aitMsgs?: string[];
    beMentioned?: boolean;
}
export interface V2NIMLocalConversationForUI extends V2NIMLocalConversation {
    msgReceiptTime?: number;
    aitMsgs?: string[];
    beMentioned?: boolean;
}
export interface V2NIMTeamJoinActionInfoForUI extends V2NIMTeamJoinActionInfo {
    isRead?: boolean;
}
export interface V2NIMFriendAddApplicationForUI extends V2NIMFriendAddApplication {
    isRead?: boolean;
}
export interface AIUserAgentProvider {
    /**
     * 注册 AI 划词数字人
     */
    getAISearchUser?(user: V2NIMAIUser[]): V2NIMAIUser | void;
    /**
     * 注册 AI 翻译数字人
     */
    getAITranslateUser?(user: V2NIMAIUser[]): V2NIMAIUser | void;
    /**
     * 注册 AI 翻译语言
     */
    getAITranslateLangs?(user: V2NIMAIUser[]): string[];
}
export interface V2NIMMessageForUI extends V2NIMMessage {
    uploadProgress?: number;
    previewImg?: string;
    canRecall?: boolean;
    reCallTimer?: number;
    canEdit?: boolean;
    isRecallMsg?: boolean;
    canEditTimer?: number;
    recallType?: 'beReCallMsg' | 'reCallMsg';
    oldText?: string;
    yxUnread?: number;
    yxRead?: number;
    errorCode?: number;
    pinState?: number;
    operatorId?: string;
    textOfVoice?: string;
    __kit__senderId?: string;
    __kit__isSelf?: boolean;
}
export interface LocalOptions {
    /**
     添加好友模式，默认需要验证
     */
    addFriendNeedVerify?: boolean;
    /**
     群组邀请模式，默认管理员可邀请
     */
    teamInviteMode?: V2NIMTeamInviteMode;
    /**
     (用户)申请入群的模式定义，默认无需验证
     */
    teamJoinMode?: V2NIMTeamJoinMode;
    /**
     (管理员)邀请入群时是否需要被邀请人(用户)的同意模式定义，默认无需验证
     */
    teamAgreeMode?: V2NIMTeamAgreeMode;
    /**
     群组更新模式，默认管理员可修改
     */
    teamUpdateTeamMode?: V2NIMTeamUpdateInfoMode;
    /**
     群组更新自定义字段模式，默认所有人可修改
     */
    teamUpdateExtMode?: V2NIMTeamUpdateExtensionMode;
    /**
     是否需要@消息提醒，默认true
     */
    needMention?: boolean;
    /**
     转让群主的同时是否退出群聊，默认false
     */
    leaveOnTransfer?: boolean;
    /**
     是否允许群主转让，默认false
     */
    allowTransferTeamOwner?: boolean;
    /**
     是否显示在线离线状态，默认 true
     */
    loginStateVisible?: boolean;
    /**
     * 发送消息前的钩子函数，异步函数
     * @param options 消息的发送参数
     * @returns Promise 处理后的发送参数
     */
    /**
      是否需要显示 p2p 消息、p2p会话列表消息已读未读，默认 false
      */
    p2pMsgReceiptVisible?: boolean;
    /**
      是否需要显示群组消息已读未读，默认 false
    */
    teamMsgReceiptVisible?: boolean;
    /**
      是否需要显示群管理员相关主动功能，默认 false
    */
    teamManagerVisible?: boolean;
    /**
      是否开启数字人功能，默认 true
     */
    aiVisible?: boolean;
    /**
      控制是否启用群聊功能。默认true，如果设为 false，所有与群相关的功能将会被隐藏。
     */
    enableTeam?: boolean;
    /**
      单个群管理员默认数量限制，默认 10 个
    */
    teamManagerLimit?: number;
    /**
     * 是否允许切换群邀请模式，默认 true
     */
    enableChangeTeamJoinMode?: boolean;
    /**
     * 是否允许切换群加入模式，默认 true
     */
    enableChangeTeamAgreeMode?: boolean;
    /**
       发送消息前的钩子函数，异步函数，返回 false 则不发送消息
     */
    sendMsgBefore?: (params: any) => Promise<V2NIMSendMessageParams | false>;
    /**
       AI 机器人提供者
     */
    aiUserAgentProvider?: AIUserAgentProvider;
    /**
       会话列表拉取会话数量，默认 100
     */
    conversationLimit?: number;
    /**
     * 是否开启日志打印
     */
    debug?: 'off' | 'debug';
    /**
     * iconfont url 私有化部署时使用
     */
    iconfontUrl?: string[];
    /**
     * 是否需要流式输出ai 消息
     */
    aiStream?: boolean;
}
export declare type ContactType = 'blackList' | 'groupList' | 'friendList' | 'msgList' | 'aiList';
export declare type Relation = 'friend' | 'stranger' | 'myself' | 'ai';
export interface AIUserServerExt {
    pinDefault?: number;
    aiChat?: number;
    welcomeText?: string;
}
export interface MyUserServerExt {
    unpinAIUsers?: string[];
}
export interface YxAitMsg {
    [key: string]: {
        text?: string;
        segments: {
            start: number;
            end: number;
            broken?: boolean;
        }[];
    };
}
export interface YxTopMessage {
    idClient: string;
    scene: V2NIMConst.V2NIMConversationType;
    from: string;
    receiverId: string;
    to: string;
    idServer: string;
    time: number;
    operator: string;
    operation: 0 | 1;
}
export interface YxServerExt {
    yxAllowAt?: 'manager' | 'all';
    yxAllowTop?: 'manager' | 'all';
    lastOpt?: 'yxAllowAt' | 'yxAllowTop' | 'yxMessageTop';
    yxMessageTop?: YxTopMessage;
    yxReplyMsg?: YxReplyMsg;
    yxAitMsg?: YxAitMsg;
    im_ui_kit_group?: boolean;
}
export interface YxReplyMsg {
    idClient: string;
    scene: V2NIMConst.V2NIMConversationType;
    from: string;
    receiverId: string;
    to: string;
    idServer: string;
    time: number;
}
