(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
    typeof define === 'function' && define.amd ? define(['exports'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global["@xkit-yx/utils"] = {}));
})(this, (function (exports) { 'use strict';

    /******************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise, SuppressedError, Symbol */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }

    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (g && (g = 0, op[0] && (_ = 0)), _) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    }

    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m) return m.call(o);
        if (o && typeof o.length === "number") return {
            next: function () {
                if (o && i >= o.length) o = void 0;
                return { value: o && o[i++], done: !o };
            }
        };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }

    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
        }
        catch (error) { e = { error: error }; }
        finally {
            try {
                if (r && !r.done && (m = i["return"])) m.call(i);
            }
            finally { if (e) throw e.error; }
        }
        return ar;
    }

    function __spreadArray(to, from, pack) {
        if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
            if (ar || !(i in from)) {
                if (!ar) ar = Array.prototype.slice.call(from, 0, i);
                ar[i] = from[i];
            }
        }
        return to.concat(ar || Array.prototype.slice.call(from));
    }

    typeof SuppressedError === "function" ? SuppressedError : function (error, suppressed, message) {
        var e = new Error(message);
        return e.name = "SuppressedError", e.error = error, e.suppressed = suppressed, e;
    };

    var bind$1 = function bind(fn, thisArg) {
      return function wrap() {
        var args = new Array(arguments.length);
        for (var i = 0; i < args.length; i++) {
          args[i] = arguments[i];
        }
        return fn.apply(thisArg, args);
      };
    };

    var bind = bind$1;

    // utils is a library of generic helper functions non-specific to axios

    var toString = Object.prototype.toString;

    // eslint-disable-next-line func-names
    var kindOf = (function(cache) {
      // eslint-disable-next-line func-names
      return function(thing) {
        var str = toString.call(thing);
        return cache[str] || (cache[str] = str.slice(8, -1).toLowerCase());
      };
    })(Object.create(null));

    function kindOfTest(type) {
      type = type.toLowerCase();
      return function isKindOf(thing) {
        return kindOf(thing) === type;
      };
    }

    /**
     * Determine if a value is an Array
     *
     * @param {Object} val The value to test
     * @returns {boolean} True if value is an Array, otherwise false
     */
    function isArray(val) {
      return Array.isArray(val);
    }

    /**
     * Determine if a value is undefined
     *
     * @param {Object} val The value to test
     * @returns {boolean} True if the value is undefined, otherwise false
     */
    function isUndefined(val) {
      return typeof val === 'undefined';
    }

    /**
     * Determine if a value is a Buffer
     *
     * @param {Object} val The value to test
     * @returns {boolean} True if value is a Buffer, otherwise false
     */
    function isBuffer(val) {
      return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor)
        && typeof val.constructor.isBuffer === 'function' && val.constructor.isBuffer(val);
    }

    /**
     * Determine if a value is an ArrayBuffer
     *
     * @function
     * @param {Object} val The value to test
     * @returns {boolean} True if value is an ArrayBuffer, otherwise false
     */
    var isArrayBuffer = kindOfTest('ArrayBuffer');


    /**
     * Determine if a value is a view on an ArrayBuffer
     *
     * @param {Object} val The value to test
     * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false
     */
    function isArrayBufferView(val) {
      var result;
      if ((typeof ArrayBuffer !== 'undefined') && (ArrayBuffer.isView)) {
        result = ArrayBuffer.isView(val);
      } else {
        result = (val) && (val.buffer) && (isArrayBuffer(val.buffer));
      }
      return result;
    }

    /**
     * Determine if a value is a String
     *
     * @param {Object} val The value to test
     * @returns {boolean} True if value is a String, otherwise false
     */
    function isString(val) {
      return typeof val === 'string';
    }

    /**
     * Determine if a value is a Number
     *
     * @param {Object} val The value to test
     * @returns {boolean} True if value is a Number, otherwise false
     */
    function isNumber(val) {
      return typeof val === 'number';
    }

    /**
     * Determine if a value is an Object
     *
     * @param {Object} val The value to test
     * @returns {boolean} True if value is an Object, otherwise false
     */
    function isObject(val) {
      return val !== null && typeof val === 'object';
    }

    /**
     * Determine if a value is a plain Object
     *
     * @param {Object} val The value to test
     * @return {boolean} True if value is a plain Object, otherwise false
     */
    function isPlainObject(val) {
      if (kindOf(val) !== 'object') {
        return false;
      }

      var prototype = Object.getPrototypeOf(val);
      return prototype === null || prototype === Object.prototype;
    }

    /**
     * Determine if a value is a Date
     *
     * @function
     * @param {Object} val The value to test
     * @returns {boolean} True if value is a Date, otherwise false
     */
    var isDate = kindOfTest('Date');

    /**
     * Determine if a value is a File
     *
     * @function
     * @param {Object} val The value to test
     * @returns {boolean} True if value is a File, otherwise false
     */
    var isFile = kindOfTest('File');

    /**
     * Determine if a value is a Blob
     *
     * @function
     * @param {Object} val The value to test
     * @returns {boolean} True if value is a Blob, otherwise false
     */
    var isBlob = kindOfTest('Blob');

    /**
     * Determine if a value is a FileList
     *
     * @function
     * @param {Object} val The value to test
     * @returns {boolean} True if value is a File, otherwise false
     */
    var isFileList = kindOfTest('FileList');

    /**
     * Determine if a value is a Function
     *
     * @param {Object} val The value to test
     * @returns {boolean} True if value is a Function, otherwise false
     */
    function isFunction(val) {
      return toString.call(val) === '[object Function]';
    }

    /**
     * Determine if a value is a Stream
     *
     * @param {Object} val The value to test
     * @returns {boolean} True if value is a Stream, otherwise false
     */
    function isStream(val) {
      return isObject(val) && isFunction(val.pipe);
    }

    /**
     * Determine if a value is a FormData
     *
     * @param {Object} thing The value to test
     * @returns {boolean} True if value is an FormData, otherwise false
     */
    function isFormData(thing) {
      var pattern = '[object FormData]';
      return thing && (
        (typeof FormData === 'function' && thing instanceof FormData) ||
        toString.call(thing) === pattern ||
        (isFunction(thing.toString) && thing.toString() === pattern)
      );
    }

    /**
     * Determine if a value is a URLSearchParams object
     * @function
     * @param {Object} val The value to test
     * @returns {boolean} True if value is a URLSearchParams object, otherwise false
     */
    var isURLSearchParams = kindOfTest('URLSearchParams');

    /**
     * Trim excess whitespace off the beginning and end of a string
     *
     * @param {String} str The String to trim
     * @returns {String} The String freed of excess whitespace
     */
    function trim(str) {
      return str.trim ? str.trim() : str.replace(/^\s+|\s+$/g, '');
    }

    /**
     * Determine if we're running in a standard browser environment
     *
     * This allows axios to run in a web worker, and react-native.
     * Both environments support XMLHttpRequest, but not fully standard globals.
     *
     * web workers:
     *  typeof window -> undefined
     *  typeof document -> undefined
     *
     * react-native:
     *  navigator.product -> 'ReactNative'
     * nativescript
     *  navigator.product -> 'NativeScript' or 'NS'
     */
    function isStandardBrowserEnv() {
      if (typeof navigator !== 'undefined' && (navigator.product === 'ReactNative' ||
                                               navigator.product === 'NativeScript' ||
                                               navigator.product === 'NS')) {
        return false;
      }
      return (
        typeof window !== 'undefined' &&
        typeof document !== 'undefined'
      );
    }

    /**
     * Iterate over an Array or an Object invoking a function for each item.
     *
     * If `obj` is an Array callback will be called passing
     * the value, index, and complete array for each item.
     *
     * If 'obj' is an Object callback will be called passing
     * the value, key, and complete object for each property.
     *
     * @param {Object|Array} obj The object to iterate
     * @param {Function} fn The callback to invoke for each item
     */
    function forEach(obj, fn) {
      // Don't bother if no value provided
      if (obj === null || typeof obj === 'undefined') {
        return;
      }

      // Force an array if not already something iterable
      if (typeof obj !== 'object') {
        /*eslint no-param-reassign:0*/
        obj = [obj];
      }

      if (isArray(obj)) {
        // Iterate over array values
        for (var i = 0, l = obj.length; i < l; i++) {
          fn.call(null, obj[i], i, obj);
        }
      } else {
        // Iterate over object keys
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key)) {
            fn.call(null, obj[key], key, obj);
          }
        }
      }
    }

    /**
     * Accepts varargs expecting each argument to be an object, then
     * immutably merges the properties of each object and returns result.
     *
     * When multiple objects contain the same key the later object in
     * the arguments list will take precedence.
     *
     * Example:
     *
     * ```js
     * var result = merge({foo: 123}, {foo: 456});
     * console.log(result.foo); // outputs 456
     * ```
     *
     * @param {Object} obj1 Object to merge
     * @returns {Object} Result of all merge properties
     */
    function merge(/* obj1, obj2, obj3, ... */) {
      var result = {};
      function assignValue(val, key) {
        if (isPlainObject(result[key]) && isPlainObject(val)) {
          result[key] = merge(result[key], val);
        } else if (isPlainObject(val)) {
          result[key] = merge({}, val);
        } else if (isArray(val)) {
          result[key] = val.slice();
        } else {
          result[key] = val;
        }
      }

      for (var i = 0, l = arguments.length; i < l; i++) {
        forEach(arguments[i], assignValue);
      }
      return result;
    }

    /**
     * Extends object a by mutably adding to it the properties of object b.
     *
     * @param {Object} a The object to be extended
     * @param {Object} b The object to copy properties from
     * @param {Object} thisArg The object to bind function to
     * @return {Object} The resulting value of object a
     */
    function extend(a, b, thisArg) {
      forEach(b, function assignValue(val, key) {
        if (thisArg && typeof val === 'function') {
          a[key] = bind(val, thisArg);
        } else {
          a[key] = val;
        }
      });
      return a;
    }

    /**
     * Remove byte order marker. This catches EF BB BF (the UTF-8 BOM)
     *
     * @param {string} content with BOM
     * @return {string} content value without BOM
     */
    function stripBOM(content) {
      if (content.charCodeAt(0) === 0xFEFF) {
        content = content.slice(1);
      }
      return content;
    }

    /**
     * Inherit the prototype methods from one constructor into another
     * @param {function} constructor
     * @param {function} superConstructor
     * @param {object} [props]
     * @param {object} [descriptors]
     */

    function inherits(constructor, superConstructor, props, descriptors) {
      constructor.prototype = Object.create(superConstructor.prototype, descriptors);
      constructor.prototype.constructor = constructor;
      props && Object.assign(constructor.prototype, props);
    }

    /**
     * Resolve object with deep prototype chain to a flat object
     * @param {Object} sourceObj source object
     * @param {Object} [destObj]
     * @param {Function} [filter]
     * @returns {Object}
     */

    function toFlatObject(sourceObj, destObj, filter) {
      var props;
      var i;
      var prop;
      var merged = {};

      destObj = destObj || {};

      do {
        props = Object.getOwnPropertyNames(sourceObj);
        i = props.length;
        while (i-- > 0) {
          prop = props[i];
          if (!merged[prop]) {
            destObj[prop] = sourceObj[prop];
            merged[prop] = true;
          }
        }
        sourceObj = Object.getPrototypeOf(sourceObj);
      } while (sourceObj && (!filter || filter(sourceObj, destObj)) && sourceObj !== Object.prototype);

      return destObj;
    }

    /*
     * determines whether a string ends with the characters of a specified string
     * @param {String} str
     * @param {String} searchString
     * @param {Number} [position= 0]
     * @returns {boolean}
     */
    function endsWith(str, searchString, position) {
      str = String(str);
      if (position === undefined || position > str.length) {
        position = str.length;
      }
      position -= searchString.length;
      var lastIndex = str.indexOf(searchString, position);
      return lastIndex !== -1 && lastIndex === position;
    }


    /**
     * Returns new array from array like object
     * @param {*} [thing]
     * @returns {Array}
     */
    function toArray(thing) {
      if (!thing) return null;
      var i = thing.length;
      if (isUndefined(i)) return null;
      var arr = new Array(i);
      while (i-- > 0) {
        arr[i] = thing[i];
      }
      return arr;
    }

    // eslint-disable-next-line func-names
    var isTypedArray = (function(TypedArray) {
      // eslint-disable-next-line func-names
      return function(thing) {
        return TypedArray && thing instanceof TypedArray;
      };
    })(typeof Uint8Array !== 'undefined' && Object.getPrototypeOf(Uint8Array));

    var utils$1 = {
      isArray: isArray,
      isArrayBuffer: isArrayBuffer,
      isBuffer: isBuffer,
      isFormData: isFormData,
      isArrayBufferView: isArrayBufferView,
      isString: isString,
      isNumber: isNumber,
      isObject: isObject,
      isPlainObject: isPlainObject,
      isUndefined: isUndefined,
      isDate: isDate,
      isFile: isFile,
      isBlob: isBlob,
      isFunction: isFunction,
      isStream: isStream,
      isURLSearchParams: isURLSearchParams,
      isStandardBrowserEnv: isStandardBrowserEnv,
      forEach: forEach,
      merge: merge,
      extend: extend,
      trim: trim,
      stripBOM: stripBOM,
      inherits: inherits,
      toFlatObject: toFlatObject,
      kindOf: kindOf,
      kindOfTest: kindOfTest,
      endsWith: endsWith,
      toArray: toArray,
      isTypedArray: isTypedArray,
      isFileList: isFileList
    };

    var utils = utils$1;

    function encode(val) {
      return encodeURIComponent(val).
        replace(/%3A/gi, ':').
        replace(/%24/g, '$').
        replace(/%2C/gi, ',').
        replace(/%20/g, '+').
        replace(/%5B/gi, '[').
        replace(/%5D/gi, ']');
    }

    /**
     * Build a URL by appending params to the end
     *
     * @param {string} url The base of the url (e.g., http://www.google.com)
     * @param {object} [params] The params to be appended
     * @returns {string} The formatted url
     */
    var buildURL$1 = function buildURL(url, params, paramsSerializer) {
      /*eslint no-param-reassign:0*/
      if (!params) {
        return url;
      }

      var serializedParams;
      if (paramsSerializer) {
        serializedParams = paramsSerializer(params);
      } else if (utils.isURLSearchParams(params)) {
        serializedParams = params.toString();
      } else {
        var parts = [];

        utils.forEach(params, function serialize(val, key) {
          if (val === null || typeof val === 'undefined') {
            return;
          }

          if (utils.isArray(val)) {
            key = key + '[]';
          } else {
            val = [val];
          }

          utils.forEach(val, function parseValue(v) {
            if (utils.isDate(v)) {
              v = v.toISOString();
            } else if (utils.isObject(v)) {
              v = JSON.stringify(v);
            }
            parts.push(encode(key) + '=' + encode(v));
          });
        });

        serializedParams = parts.join('&');
      }

      if (serializedParams) {
        var hashmarkIndex = url.indexOf('#');
        if (hashmarkIndex !== -1) {
          url = url.slice(0, hashmarkIndex);
        }

        url += (url.indexOf('?') === -1 ? '?' : '&') + serializedParams;
      }

      return url;
    };

    function InterceptorManager$1() {
      this.handlers = [];
    }

    /**
     * Add a new interceptor to the stack
     *
     * @param {Function} fulfilled The function to handle `then` for a `Promise`
     * @param {Function} rejected The function to handle `reject` for a `Promise`
     *
     * @return {Number} An ID used to remove interceptor later
     */
    InterceptorManager$1.prototype.use = function use(fulfilled, rejected, options) {
      this.handlers.push({
        fulfilled: fulfilled,
        rejected: rejected,
        synchronous: options ? options.synchronous : false,
        runWhen: options ? options.runWhen : null
      });
      return this.handlers.length - 1;
    };

    /**
     * Remove an interceptor from the stack
     *
     * @param {Number} id The ID that was returned by `use`
     */
    InterceptorManager$1.prototype.eject = function eject(id) {
      if (this.handlers[id]) {
        this.handlers[id] = null;
      }
    };

    /**
     * Iterate over all the registered interceptors
     *
     * This method is particularly useful for skipping over any
     * interceptors that may have become `null` calling `eject`.
     *
     * @param {Function} fn The function to call for each interceptor
     */
    InterceptorManager$1.prototype.forEach = function forEach(fn) {
      utils.forEach(this.handlers, function forEachHandler(h) {
        if (h !== null) {
          fn(h);
        }
      });
    };

    var InterceptorManager_1 = InterceptorManager$1;

    var normalizeHeaderName$1 = function normalizeHeaderName(headers, normalizedName) {
      utils.forEach(headers, function processHeader(value, name) {
        if (name !== normalizedName && name.toUpperCase() === normalizedName.toUpperCase()) {
          headers[normalizedName] = value;
          delete headers[name];
        }
      });
    };

    /**
     * Create an Error with the specified message, config, error code, request and response.
     *
     * @param {string} message The error message.
     * @param {string} [code] The error code (for example, 'ECONNABORTED').
     * @param {Object} [config] The config.
     * @param {Object} [request] The request.
     * @param {Object} [response] The response.
     * @returns {Error} The created error.
     */
    function AxiosError(message, code, config, request, response) {
      Error.call(this);
      this.message = message;
      this.name = 'AxiosError';
      code && (this.code = code);
      config && (this.config = config);
      request && (this.request = request);
      response && (this.response = response);
    }

    utils.inherits(AxiosError, Error, {
      toJSON: function toJSON() {
        return {
          // Standard
          message: this.message,
          name: this.name,
          // Microsoft
          description: this.description,
          number: this.number,
          // Mozilla
          fileName: this.fileName,
          lineNumber: this.lineNumber,
          columnNumber: this.columnNumber,
          stack: this.stack,
          // Axios
          config: this.config,
          code: this.code,
          status: this.response && this.response.status ? this.response.status : null
        };
      }
    });

    var prototype = AxiosError.prototype;
    var descriptors = {};

    [
      'ERR_BAD_OPTION_VALUE',
      'ERR_BAD_OPTION',
      'ECONNABORTED',
      'ETIMEDOUT',
      'ERR_NETWORK',
      'ERR_FR_TOO_MANY_REDIRECTS',
      'ERR_DEPRECATED',
      'ERR_BAD_RESPONSE',
      'ERR_BAD_REQUEST',
      'ERR_CANCELED'
    // eslint-disable-next-line func-names
    ].forEach(function(code) {
      descriptors[code] = {value: code};
    });

    Object.defineProperties(AxiosError, descriptors);
    Object.defineProperty(prototype, 'isAxiosError', {value: true});

    // eslint-disable-next-line func-names
    AxiosError.from = function(error, code, config, request, response, customProps) {
      var axiosError = Object.create(prototype);

      utils.toFlatObject(error, axiosError, function filter(obj) {
        return obj !== Error.prototype;
      });

      AxiosError.call(axiosError, error.message, code, config, request, response);

      axiosError.name = error.name;

      customProps && Object.assign(axiosError, customProps);

      return axiosError;
    };

    var AxiosError_1 = AxiosError;

    var transitional = {
      silentJSONParsing: true,
      forcedJSONParsing: true,
      clarifyTimeoutError: false
    };
    transitional.silentJSONParsing;
    transitional.forcedJSONParsing;
    transitional.clarifyTimeoutError;

    /**
     * Convert a data object to FormData
     * @param {Object} obj
     * @param {?Object} [formData]
     * @returns {Object}
     **/

    function toFormData(obj, formData) {
      // eslint-disable-next-line no-param-reassign
      formData = formData || new FormData();

      var stack = [];

      function convertValue(value) {
        if (value === null) return '';

        if (utils.isDate(value)) {
          return value.toISOString();
        }

        if (utils.isArrayBuffer(value) || utils.isTypedArray(value)) {
          return typeof Blob === 'function' ? new Blob([value]) : Buffer.from(value);
        }

        return value;
      }

      function build(data, parentKey) {
        if (utils.isPlainObject(data) || utils.isArray(data)) {
          if (stack.indexOf(data) !== -1) {
            throw Error('Circular reference detected in ' + parentKey);
          }

          stack.push(data);

          utils.forEach(data, function each(value, key) {
            if (utils.isUndefined(value)) return;
            var fullKey = parentKey ? parentKey + '.' + key : key;
            var arr;

            if (value && !parentKey && typeof value === 'object') {
              if (utils.endsWith(key, '{}')) {
                // eslint-disable-next-line no-param-reassign
                value = JSON.stringify(value);
              } else if (utils.endsWith(key, '[]') && (arr = utils.toArray(value))) {
                // eslint-disable-next-line func-names
                arr.forEach(function(el) {
                  !utils.isUndefined(el) && formData.append(fullKey, convertValue(el));
                });
                return;
              }
            }

            build(value, fullKey);
          });

          stack.pop();
        } else {
          formData.append(parentKey, convertValue(data));
        }
      }

      build(obj);

      return formData;
    }

    var toFormData_1 = toFormData;

    var require$$5 = AxiosError_1;

    /**
     * Resolve or reject a Promise based on response status.
     *
     * @param {Function} resolve A function that resolves the promise.
     * @param {Function} reject A function that rejects the promise.
     * @param {object} response The response.
     */
    var settle$1 = function settle(resolve, reject, response) {
      var validateStatus = response.config.validateStatus;
      if (!response.status || !validateStatus || validateStatus(response.status)) {
        resolve(response);
      } else {
        reject(new require$$5(
          'Request failed with status code ' + response.status,
          [require$$5.ERR_BAD_REQUEST, require$$5.ERR_BAD_RESPONSE][Math.floor(response.status / 100) - 4],
          response.config,
          response.request,
          response
        ));
      }
    };

    var cookies$1 = (
      utils.isStandardBrowserEnv() ?

      // Standard browser envs support document.cookie
        (function standardBrowserEnv() {
          return {
            write: function write(name, value, expires, path, domain, secure) {
              var cookie = [];
              cookie.push(name + '=' + encodeURIComponent(value));

              if (utils.isNumber(expires)) {
                cookie.push('expires=' + new Date(expires).toGMTString());
              }

              if (utils.isString(path)) {
                cookie.push('path=' + path);
              }

              if (utils.isString(domain)) {
                cookie.push('domain=' + domain);
              }

              if (secure === true) {
                cookie.push('secure');
              }

              document.cookie = cookie.join('; ');
            },

            read: function read(name) {
              var match = document.cookie.match(new RegExp('(^|;\\s*)(' + name + ')=([^;]*)'));
              return (match ? decodeURIComponent(match[3]) : null);
            },

            remove: function remove(name) {
              this.write(name, '', Date.now() - 86400000);
            }
          };
        })() :

      // Non standard browser env (web workers, react-native) lack needed support.
        (function nonStandardBrowserEnv() {
          return {
            write: function write() {},
            read: function read() { return null; },
            remove: function remove() {}
          };
        })()
    );

    /**
     * Determines whether the specified URL is absolute
     *
     * @param {string} url The URL to test
     * @returns {boolean} True if the specified URL is absolute, otherwise false
     */
    var isAbsoluteURL$1 = function isAbsoluteURL(url) {
      // A URL is considered absolute if it begins with "<scheme>://" or "//" (protocol-relative URL).
      // RFC 3986 defines scheme name as a sequence of characters beginning with a letter and followed
      // by any combination of letters, digits, plus, period, or hyphen.
      return /^([a-z][a-z\d+\-.]*:)?\/\//i.test(url);
    };

    /**
     * Creates a new URL by combining the specified URLs
     *
     * @param {string} baseURL The base URL
     * @param {string} relativeURL The relative URL
     * @returns {string} The combined URL
     */
    var combineURLs$1 = function combineURLs(baseURL, relativeURL) {
      return relativeURL
        ? baseURL.replace(/\/+$/, '') + '/' + relativeURL.replace(/^\/+/, '')
        : baseURL;
    };

    var isAbsoluteURL = isAbsoluteURL$1;

    var combineURLs = combineURLs$1;

    /**
     * Creates a new URL by combining the baseURL with the requestedURL,
     * only when the requestedURL is not already an absolute URL.
     * If the requestURL is absolute, this function returns the requestedURL untouched.
     *
     * @param {string} baseURL The base URL
     * @param {string} requestedURL Absolute or relative URL to combine
     * @returns {string} The combined full path
     */
    var buildFullPath$1 = function buildFullPath(baseURL, requestedURL) {
      if (baseURL && !isAbsoluteURL(requestedURL)) {
        return combineURLs(baseURL, requestedURL);
      }
      return requestedURL;
    };

    // Headers whose duplicates are ignored by node
    // c.f. https://nodejs.org/api/http.html#http_message_headers
    var ignoreDuplicateOf = [
      'age', 'authorization', 'content-length', 'content-type', 'etag',
      'expires', 'from', 'host', 'if-modified-since', 'if-unmodified-since',
      'last-modified', 'location', 'max-forwards', 'proxy-authorization',
      'referer', 'retry-after', 'user-agent'
    ];

    /**
     * Parse headers into an object
     *
     * ```
     * Date: Wed, 27 Aug 2014 08:58:49 GMT
     * Content-Type: application/json
     * Connection: keep-alive
     * Transfer-Encoding: chunked
     * ```
     *
     * @param {String} headers Headers needing to be parsed
     * @returns {Object} Headers parsed into an object
     */
    var parseHeaders$1 = function parseHeaders(headers) {
      var parsed = {};
      var key;
      var val;
      var i;

      if (!headers) { return parsed; }

      utils.forEach(headers.split('\n'), function parser(line) {
        i = line.indexOf(':');
        key = utils.trim(line.substr(0, i)).toLowerCase();
        val = utils.trim(line.substr(i + 1));

        if (key) {
          if (parsed[key] && ignoreDuplicateOf.indexOf(key) >= 0) {
            return;
          }
          if (key === 'set-cookie') {
            parsed[key] = (parsed[key] ? parsed[key] : []).concat([val]);
          } else {
            parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;
          }
        }
      });

      return parsed;
    };

    var isURLSameOrigin$1 = (
      utils.isStandardBrowserEnv() ?

      // Standard browser envs have full support of the APIs needed to test
      // whether the request URL is of the same origin as current location.
        (function standardBrowserEnv() {
          var msie = /(msie|trident)/i.test(navigator.userAgent);
          var urlParsingNode = document.createElement('a');
          var originURL;

          /**
        * Parse a URL to discover it's components
        *
        * @param {String} url The URL to be parsed
        * @returns {Object}
        */
          function resolveURL(url) {
            var href = url;

            if (msie) {
            // IE needs attribute set twice to normalize properties
              urlParsingNode.setAttribute('href', href);
              href = urlParsingNode.href;
            }

            urlParsingNode.setAttribute('href', href);

            // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils
            return {
              href: urlParsingNode.href,
              protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, '') : '',
              host: urlParsingNode.host,
              search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, '') : '',
              hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, '') : '',
              hostname: urlParsingNode.hostname,
              port: urlParsingNode.port,
              pathname: (urlParsingNode.pathname.charAt(0) === '/') ?
                urlParsingNode.pathname :
                '/' + urlParsingNode.pathname
            };
          }

          originURL = resolveURL(window.location.href);

          /**
        * Determine if a URL shares the same origin as the current location
        *
        * @param {String} requestURL The URL to test
        * @returns {boolean} True if URL shares the same origin, otherwise false
        */
          return function isURLSameOrigin(requestURL) {
            var parsed = (utils.isString(requestURL)) ? resolveURL(requestURL) : requestURL;
            return (parsed.protocol === originURL.protocol &&
                parsed.host === originURL.host);
          };
        })() :

      // Non standard browser envs (web workers, react-native) lack needed support.
        (function nonStandardBrowserEnv() {
          return function isURLSameOrigin() {
            return true;
          };
        })()
    );

    /**
     * A `CanceledError` is an object that is thrown when an operation is canceled.
     *
     * @class
     * @param {string=} message The message.
     */
    function CanceledError(message) {
      // eslint-disable-next-line no-eq-null,eqeqeq
      require$$5.call(this, message == null ? 'canceled' : message, require$$5.ERR_CANCELED);
      this.name = 'CanceledError';
    }

    utils.inherits(CanceledError, require$$5, {
      __CANCEL__: true
    });

    var CanceledError_1 = CanceledError;

    var parseProtocol$1 = function parseProtocol(url) {
      var match = /^([-+\w]{1,25})(:?\/\/|:)/.exec(url);
      return match && match[1] || '';
    };

    var settle = settle$1;

    var cookies = cookies$1;

    var buildURL = buildURL$1;

    var buildFullPath = buildFullPath$1;

    var parseHeaders = parseHeaders$1;

    var isURLSameOrigin = isURLSameOrigin$1;

    var transitionalDefaults = transitional;

    var require$$0$1 = CanceledError_1;

    var parseProtocol = parseProtocol$1;

    var xhr = function xhrAdapter(config) {
      return new Promise(function dispatchXhrRequest(resolve, reject) {
        var requestData = config.data;
        var requestHeaders = config.headers;
        var responseType = config.responseType;
        var onCanceled;
        function done() {
          if (config.cancelToken) {
            config.cancelToken.unsubscribe(onCanceled);
          }

          if (config.signal) {
            config.signal.removeEventListener('abort', onCanceled);
          }
        }

        if (utils.isFormData(requestData) && utils.isStandardBrowserEnv()) {
          delete requestHeaders['Content-Type']; // Let the browser set it
        }

        var request = new XMLHttpRequest();

        // HTTP basic authentication
        if (config.auth) {
          var username = config.auth.username || '';
          var password = config.auth.password ? unescape(encodeURIComponent(config.auth.password)) : '';
          requestHeaders.Authorization = 'Basic ' + btoa(username + ':' + password);
        }

        var fullPath = buildFullPath(config.baseURL, config.url);

        request.open(config.method.toUpperCase(), buildURL(fullPath, config.params, config.paramsSerializer), true);

        // Set the request timeout in MS
        request.timeout = config.timeout;

        function onloadend() {
          if (!request) {
            return;
          }
          // Prepare the response
          var responseHeaders = 'getAllResponseHeaders' in request ? parseHeaders(request.getAllResponseHeaders()) : null;
          var responseData = !responseType || responseType === 'text' ||  responseType === 'json' ?
            request.responseText : request.response;
          var response = {
            data: responseData,
            status: request.status,
            statusText: request.statusText,
            headers: responseHeaders,
            config: config,
            request: request
          };

          settle(function _resolve(value) {
            resolve(value);
            done();
          }, function _reject(err) {
            reject(err);
            done();
          }, response);

          // Clean up request
          request = null;
        }

        if ('onloadend' in request) {
          // Use onloadend if available
          request.onloadend = onloadend;
        } else {
          // Listen for ready state to emulate onloadend
          request.onreadystatechange = function handleLoad() {
            if (!request || request.readyState !== 4) {
              return;
            }

            // The request errored out and we didn't get a response, this will be
            // handled by onerror instead
            // With one exception: request that using file: protocol, most browsers
            // will return status as 0 even though it's a successful request
            if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf('file:') === 0)) {
              return;
            }
            // readystate handler is calling before onerror or ontimeout handlers,
            // so we should call onloadend on the next 'tick'
            setTimeout(onloadend);
          };
        }

        // Handle browser request cancellation (as opposed to a manual cancellation)
        request.onabort = function handleAbort() {
          if (!request) {
            return;
          }

          reject(new require$$5('Request aborted', require$$5.ECONNABORTED, config, request));

          // Clean up request
          request = null;
        };

        // Handle low level network errors
        request.onerror = function handleError() {
          // Real errors are hidden from us by the browser
          // onerror should only fire if it's a network error
          reject(new require$$5('Network Error', require$$5.ERR_NETWORK, config, request, request));

          // Clean up request
          request = null;
        };

        // Handle timeout
        request.ontimeout = function handleTimeout() {
          var timeoutErrorMessage = config.timeout ? 'timeout of ' + config.timeout + 'ms exceeded' : 'timeout exceeded';
          var transitional = config.transitional || transitionalDefaults;
          if (config.timeoutErrorMessage) {
            timeoutErrorMessage = config.timeoutErrorMessage;
          }
          reject(new require$$5(
            timeoutErrorMessage,
            transitional.clarifyTimeoutError ? require$$5.ETIMEDOUT : require$$5.ECONNABORTED,
            config,
            request));

          // Clean up request
          request = null;
        };

        // Add xsrf header
        // This is only done if running in a standard browser environment.
        // Specifically not if we're in a web worker, or react-native.
        if (utils.isStandardBrowserEnv()) {
          // Add xsrf header
          var xsrfValue = (config.withCredentials || isURLSameOrigin(fullPath)) && config.xsrfCookieName ?
            cookies.read(config.xsrfCookieName) :
            undefined;

          if (xsrfValue) {
            requestHeaders[config.xsrfHeaderName] = xsrfValue;
          }
        }

        // Add headers to the request
        if ('setRequestHeader' in request) {
          utils.forEach(requestHeaders, function setRequestHeader(val, key) {
            if (typeof requestData === 'undefined' && key.toLowerCase() === 'content-type') {
              // Remove Content-Type if data is undefined
              delete requestHeaders[key];
            } else {
              // Otherwise add header to the request
              request.setRequestHeader(key, val);
            }
          });
        }

        // Add withCredentials to request if needed
        if (!utils.isUndefined(config.withCredentials)) {
          request.withCredentials = !!config.withCredentials;
        }

        // Add responseType to request if needed
        if (responseType && responseType !== 'json') {
          request.responseType = config.responseType;
        }

        // Handle progress if needed
        if (typeof config.onDownloadProgress === 'function') {
          request.addEventListener('progress', config.onDownloadProgress);
        }

        // Not all browsers support upload events
        if (typeof config.onUploadProgress === 'function' && request.upload) {
          request.upload.addEventListener('progress', config.onUploadProgress);
        }

        if (config.cancelToken || config.signal) {
          // Handle cancellation
          // eslint-disable-next-line func-names
          onCanceled = function(cancel) {
            if (!request) {
              return;
            }
            reject(!cancel || (cancel && cancel.type) ? new require$$0$1() : cancel);
            request.abort();
            request = null;
          };

          config.cancelToken && config.cancelToken.subscribe(onCanceled);
          if (config.signal) {
            config.signal.aborted ? onCanceled() : config.signal.addEventListener('abort', onCanceled);
          }
        }

        if (!requestData) {
          requestData = null;
        }

        var protocol = parseProtocol(fullPath);

        if (protocol && [ 'http', 'https', 'file' ].indexOf(protocol) === -1) {
          reject(new require$$5('Unsupported protocol ' + protocol + ':', require$$5.ERR_BAD_REQUEST, config));
          return;
        }


        // Send the request
        request.send(requestData);
      });
    };

    // eslint-disable-next-line strict
    var _null = null;

    var normalizeHeaderName = normalizeHeaderName$1;

    var require$$4 = toFormData_1;

    var require$$1$1 = xhr;

    var require$$2$1 = _null;

    var DEFAULT_CONTENT_TYPE = {
      'Content-Type': 'application/x-www-form-urlencoded'
    };

    function setContentTypeIfUnset(headers, value) {
      if (!utils.isUndefined(headers) && utils.isUndefined(headers['Content-Type'])) {
        headers['Content-Type'] = value;
      }
    }

    function getDefaultAdapter() {
      var adapter;
      if (typeof XMLHttpRequest !== 'undefined') {
        // For browsers use XHR adapter
        adapter = require$$1$1;
      } else if (typeof process !== 'undefined' && Object.prototype.toString.call(process) === '[object process]') {
        // For node use HTTP adapter
        adapter = require$$1$1;
      }
      return adapter;
    }

    function stringifySafely(rawValue, parser, encoder) {
      if (utils.isString(rawValue)) {
        try {
          (parser || JSON.parse)(rawValue);
          return utils.trim(rawValue);
        } catch (e) {
          if (e.name !== 'SyntaxError') {
            throw e;
          }
        }
      }

      return (encoder || JSON.stringify)(rawValue);
    }

    var defaults$1 = {

      transitional: transitionalDefaults,

      adapter: getDefaultAdapter(),

      transformRequest: [function transformRequest(data, headers) {
        normalizeHeaderName(headers, 'Accept');
        normalizeHeaderName(headers, 'Content-Type');

        if (utils.isFormData(data) ||
          utils.isArrayBuffer(data) ||
          utils.isBuffer(data) ||
          utils.isStream(data) ||
          utils.isFile(data) ||
          utils.isBlob(data)
        ) {
          return data;
        }
        if (utils.isArrayBufferView(data)) {
          return data.buffer;
        }
        if (utils.isURLSearchParams(data)) {
          setContentTypeIfUnset(headers, 'application/x-www-form-urlencoded;charset=utf-8');
          return data.toString();
        }

        var isObjectPayload = utils.isObject(data);
        var contentType = headers && headers['Content-Type'];

        var isFileList;

        if ((isFileList = utils.isFileList(data)) || (isObjectPayload && contentType === 'multipart/form-data')) {
          var _FormData = this.env && this.env.FormData;
          return require$$4(isFileList ? {'files[]': data} : data, _FormData && new _FormData());
        } else if (isObjectPayload || contentType === 'application/json') {
          setContentTypeIfUnset(headers, 'application/json');
          return stringifySafely(data);
        }

        return data;
      }],

      transformResponse: [function transformResponse(data) {
        var transitional = this.transitional || defaults$1.transitional;
        var silentJSONParsing = transitional && transitional.silentJSONParsing;
        var forcedJSONParsing = transitional && transitional.forcedJSONParsing;
        var strictJSONParsing = !silentJSONParsing && this.responseType === 'json';

        if (strictJSONParsing || (forcedJSONParsing && utils.isString(data) && data.length)) {
          try {
            return JSON.parse(data);
          } catch (e) {
            if (strictJSONParsing) {
              if (e.name === 'SyntaxError') {
                throw require$$5.from(e, require$$5.ERR_BAD_RESPONSE, this, null, this.response);
              }
              throw e;
            }
          }
        }

        return data;
      }],

      /**
       * A timeout in milliseconds to abort a request. If set to 0 (default) a
       * timeout is not created.
       */
      timeout: 0,

      xsrfCookieName: 'XSRF-TOKEN',
      xsrfHeaderName: 'X-XSRF-TOKEN',

      maxContentLength: -1,
      maxBodyLength: -1,

      env: {
        FormData: require$$2$1
      },

      validateStatus: function validateStatus(status) {
        return status >= 200 && status < 300;
      },

      headers: {
        common: {
          'Accept': 'application/json, text/plain, */*'
        }
      }
    };

    utils.forEach(['delete', 'get', 'head'], function forEachMethodNoData(method) {
      defaults$1.headers[method] = {};
    });

    utils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
      defaults$1.headers[method] = utils.merge(DEFAULT_CONTENT_TYPE);
    });

    var defaults_1 = defaults$1;

    var defaults = defaults_1;

    /**
     * Transform the data for a request or a response
     *
     * @param {Object|String} data The data to be transformed
     * @param {Array} headers The headers for the request or response
     * @param {Array|Function} fns A single function or Array of functions
     * @returns {*} The resulting transformed data
     */
    var transformData$1 = function transformData(data, headers, fns) {
      var context = this || defaults;
      /*eslint no-param-reassign:0*/
      utils.forEach(fns, function transform(fn) {
        data = fn.call(context, data, headers);
      });

      return data;
    };

    var isCancel = function isCancel(value) {
      return !!(value && value.__CANCEL__);
    };

    var transformData = transformData$1;

    var require$$2 = isCancel;

    /**
     * Throws a `CanceledError` if cancellation has been requested.
     */
    function throwIfCancellationRequested(config) {
      if (config.cancelToken) {
        config.cancelToken.throwIfRequested();
      }

      if (config.signal && config.signal.aborted) {
        throw new require$$0$1();
      }
    }

    /**
     * Dispatch a request to the server using the configured adapter.
     *
     * @param {object} config The config that is to be used for the request
     * @returns {Promise} The Promise to be fulfilled
     */
    var dispatchRequest$1 = function dispatchRequest(config) {
      throwIfCancellationRequested(config);

      // Ensure headers exist
      config.headers = config.headers || {};

      // Transform request data
      config.data = transformData.call(
        config,
        config.data,
        config.headers,
        config.transformRequest
      );

      // Flatten headers
      config.headers = utils.merge(
        config.headers.common || {},
        config.headers[config.method] || {},
        config.headers
      );

      utils.forEach(
        ['delete', 'get', 'head', 'post', 'put', 'patch', 'common'],
        function cleanHeaderConfig(method) {
          delete config.headers[method];
        }
      );

      var adapter = config.adapter || defaults.adapter;

      return adapter(config).then(function onAdapterResolution(response) {
        throwIfCancellationRequested(config);

        // Transform response data
        response.data = transformData.call(
          config,
          response.data,
          response.headers,
          config.transformResponse
        );

        return response;
      }, function onAdapterRejection(reason) {
        if (!require$$2(reason)) {
          throwIfCancellationRequested(config);

          // Transform response data
          if (reason && reason.response) {
            reason.response.data = transformData.call(
              config,
              reason.response.data,
              reason.response.headers,
              config.transformResponse
            );
          }
        }

        return Promise.reject(reason);
      });
    };

    /**
     * Config-specific merge-function which creates a new config-object
     * by merging two configuration objects together.
     *
     * @param {Object} config1
     * @param {Object} config2
     * @returns {Object} New object resulting from merging config2 to config1
     */
    var mergeConfig$1 = function mergeConfig(config1, config2) {
      // eslint-disable-next-line no-param-reassign
      config2 = config2 || {};
      var config = {};

      function getMergedValue(target, source) {
        if (utils.isPlainObject(target) && utils.isPlainObject(source)) {
          return utils.merge(target, source);
        } else if (utils.isPlainObject(source)) {
          return utils.merge({}, source);
        } else if (utils.isArray(source)) {
          return source.slice();
        }
        return source;
      }

      // eslint-disable-next-line consistent-return
      function mergeDeepProperties(prop) {
        if (!utils.isUndefined(config2[prop])) {
          return getMergedValue(config1[prop], config2[prop]);
        } else if (!utils.isUndefined(config1[prop])) {
          return getMergedValue(undefined, config1[prop]);
        }
      }

      // eslint-disable-next-line consistent-return
      function valueFromConfig2(prop) {
        if (!utils.isUndefined(config2[prop])) {
          return getMergedValue(undefined, config2[prop]);
        }
      }

      // eslint-disable-next-line consistent-return
      function defaultToConfig2(prop) {
        if (!utils.isUndefined(config2[prop])) {
          return getMergedValue(undefined, config2[prop]);
        } else if (!utils.isUndefined(config1[prop])) {
          return getMergedValue(undefined, config1[prop]);
        }
      }

      // eslint-disable-next-line consistent-return
      function mergeDirectKeys(prop) {
        if (prop in config2) {
          return getMergedValue(config1[prop], config2[prop]);
        } else if (prop in config1) {
          return getMergedValue(undefined, config1[prop]);
        }
      }

      var mergeMap = {
        'url': valueFromConfig2,
        'method': valueFromConfig2,
        'data': valueFromConfig2,
        'baseURL': defaultToConfig2,
        'transformRequest': defaultToConfig2,
        'transformResponse': defaultToConfig2,
        'paramsSerializer': defaultToConfig2,
        'timeout': defaultToConfig2,
        'timeoutMessage': defaultToConfig2,
        'withCredentials': defaultToConfig2,
        'adapter': defaultToConfig2,
        'responseType': defaultToConfig2,
        'xsrfCookieName': defaultToConfig2,
        'xsrfHeaderName': defaultToConfig2,
        'onUploadProgress': defaultToConfig2,
        'onDownloadProgress': defaultToConfig2,
        'decompress': defaultToConfig2,
        'maxContentLength': defaultToConfig2,
        'maxBodyLength': defaultToConfig2,
        'beforeRedirect': defaultToConfig2,
        'transport': defaultToConfig2,
        'httpAgent': defaultToConfig2,
        'httpsAgent': defaultToConfig2,
        'cancelToken': defaultToConfig2,
        'socketPath': defaultToConfig2,
        'responseEncoding': defaultToConfig2,
        'validateStatus': mergeDirectKeys
      };

      utils.forEach(Object.keys(config1).concat(Object.keys(config2)), function computeConfigValue(prop) {
        var merge = mergeMap[prop] || mergeDeepProperties;
        var configValue = merge(prop);
        (utils.isUndefined(configValue) && merge !== mergeDirectKeys) || (config[prop] = configValue);
      });

      return config;
    };

    var data = {
      "version": "0.27.2"
    };

    var require$$3 = data;

    var VERSION = require$$3.version;


    var validators$1 = {};

    // eslint-disable-next-line func-names
    ['object', 'boolean', 'number', 'function', 'string', 'symbol'].forEach(function(type, i) {
      validators$1[type] = function validator(thing) {
        return typeof thing === type || 'a' + (i < 1 ? 'n ' : ' ') + type;
      };
    });

    var deprecatedWarnings = {};

    /**
     * Transitional option validator
     * @param {function|boolean?} validator - set to false if the transitional option has been removed
     * @param {string?} version - deprecated version / removed since version
     * @param {string?} message - some message with additional info
     * @returns {function}
     */
    validators$1.transitional = function transitional(validator, version, message) {
      function formatMessage(opt, desc) {
        return '[Axios v' + VERSION + '] Transitional option \'' + opt + '\'' + desc + (message ? '. ' + message : '');
      }

      // eslint-disable-next-line func-names
      return function(value, opt, opts) {
        if (validator === false) {
          throw new require$$5(
            formatMessage(opt, ' has been removed' + (version ? ' in ' + version : '')),
            require$$5.ERR_DEPRECATED
          );
        }

        if (version && !deprecatedWarnings[opt]) {
          deprecatedWarnings[opt] = true;
          // eslint-disable-next-line no-console
          console.warn(
            formatMessage(
              opt,
              ' has been deprecated since v' + version + ' and will be removed in the near future'
            )
          );
        }

        return validator ? validator(value, opt, opts) : true;
      };
    };

    /**
     * Assert object's properties type
     * @param {object} options
     * @param {object} schema
     * @param {boolean?} allowUnknown
     */

    function assertOptions(options, schema, allowUnknown) {
      if (typeof options !== 'object') {
        throw new require$$5('options must be an object', require$$5.ERR_BAD_OPTION_VALUE);
      }
      var keys = Object.keys(options);
      var i = keys.length;
      while (i-- > 0) {
        var opt = keys[i];
        var validator = schema[opt];
        if (validator) {
          var value = options[opt];
          var result = value === undefined || validator(value, opt, options);
          if (result !== true) {
            throw new require$$5('option ' + opt + ' must be ' + result, require$$5.ERR_BAD_OPTION_VALUE);
          }
          continue;
        }
        if (allowUnknown !== true) {
          throw new require$$5('Unknown option ' + opt, require$$5.ERR_BAD_OPTION);
        }
      }
    }

    var validator$1 = {
      assertOptions: assertOptions,
      validators: validators$1
    };

    var InterceptorManager = InterceptorManager_1;

    var dispatchRequest = dispatchRequest$1;

    var mergeConfig = mergeConfig$1;

    var validator = validator$1;

    var validators = validator.validators;
    /**
     * Create a new instance of Axios
     *
     * @param {Object} instanceConfig The default config for the instance
     */
    function Axios$1(instanceConfig) {
      this.defaults = instanceConfig;
      this.interceptors = {
        request: new InterceptorManager(),
        response: new InterceptorManager()
      };
    }

    /**
     * Dispatch a request
     *
     * @param {Object} config The config specific for this request (merged with this.defaults)
     */
    Axios$1.prototype.request = function request(configOrUrl, config) {
      /*eslint no-param-reassign:0*/
      // Allow for axios('example/url'[, config]) a la fetch API
      if (typeof configOrUrl === 'string') {
        config = config || {};
        config.url = configOrUrl;
      } else {
        config = configOrUrl || {};
      }

      config = mergeConfig(this.defaults, config);

      // Set config.method
      if (config.method) {
        config.method = config.method.toLowerCase();
      } else if (this.defaults.method) {
        config.method = this.defaults.method.toLowerCase();
      } else {
        config.method = 'get';
      }

      var transitional = config.transitional;

      if (transitional !== undefined) {
        validator.assertOptions(transitional, {
          silentJSONParsing: validators.transitional(validators.boolean),
          forcedJSONParsing: validators.transitional(validators.boolean),
          clarifyTimeoutError: validators.transitional(validators.boolean)
        }, false);
      }

      // filter out skipped interceptors
      var requestInterceptorChain = [];
      var synchronousRequestInterceptors = true;
      this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
        if (typeof interceptor.runWhen === 'function' && interceptor.runWhen(config) === false) {
          return;
        }

        synchronousRequestInterceptors = synchronousRequestInterceptors && interceptor.synchronous;

        requestInterceptorChain.unshift(interceptor.fulfilled, interceptor.rejected);
      });

      var responseInterceptorChain = [];
      this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
        responseInterceptorChain.push(interceptor.fulfilled, interceptor.rejected);
      });

      var promise;

      if (!synchronousRequestInterceptors) {
        var chain = [dispatchRequest, undefined];

        Array.prototype.unshift.apply(chain, requestInterceptorChain);
        chain = chain.concat(responseInterceptorChain);

        promise = Promise.resolve(config);
        while (chain.length) {
          promise = promise.then(chain.shift(), chain.shift());
        }

        return promise;
      }


      var newConfig = config;
      while (requestInterceptorChain.length) {
        var onFulfilled = requestInterceptorChain.shift();
        var onRejected = requestInterceptorChain.shift();
        try {
          newConfig = onFulfilled(newConfig);
        } catch (error) {
          onRejected(error);
          break;
        }
      }

      try {
        promise = dispatchRequest(newConfig);
      } catch (error) {
        return Promise.reject(error);
      }

      while (responseInterceptorChain.length) {
        promise = promise.then(responseInterceptorChain.shift(), responseInterceptorChain.shift());
      }

      return promise;
    };

    Axios$1.prototype.getUri = function getUri(config) {
      config = mergeConfig(this.defaults, config);
      var fullPath = buildFullPath(config.baseURL, config.url);
      return buildURL(fullPath, config.params, config.paramsSerializer);
    };

    // Provide aliases for supported request methods
    utils.forEach(['delete', 'get', 'head', 'options'], function forEachMethodNoData(method) {
      /*eslint func-names:0*/
      Axios$1.prototype[method] = function(url, config) {
        return this.request(mergeConfig(config || {}, {
          method: method,
          url: url,
          data: (config || {}).data
        }));
      };
    });

    utils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
      /*eslint func-names:0*/

      function generateHTTPMethod(isForm) {
        return function httpMethod(url, data, config) {
          return this.request(mergeConfig(config || {}, {
            method: method,
            headers: isForm ? {
              'Content-Type': 'multipart/form-data'
            } : {},
            url: url,
            data: data
          }));
        };
      }

      Axios$1.prototype[method] = generateHTTPMethod();

      Axios$1.prototype[method + 'Form'] = generateHTTPMethod(true);
    });

    var Axios_1 = Axios$1;

    /**
     * A `CancelToken` is an object that can be used to request cancellation of an operation.
     *
     * @class
     * @param {Function} executor The executor function.
     */
    function CancelToken(executor) {
      if (typeof executor !== 'function') {
        throw new TypeError('executor must be a function.');
      }

      var resolvePromise;

      this.promise = new Promise(function promiseExecutor(resolve) {
        resolvePromise = resolve;
      });

      var token = this;

      // eslint-disable-next-line func-names
      this.promise.then(function(cancel) {
        if (!token._listeners) return;

        var i;
        var l = token._listeners.length;

        for (i = 0; i < l; i++) {
          token._listeners[i](cancel);
        }
        token._listeners = null;
      });

      // eslint-disable-next-line func-names
      this.promise.then = function(onfulfilled) {
        var _resolve;
        // eslint-disable-next-line func-names
        var promise = new Promise(function(resolve) {
          token.subscribe(resolve);
          _resolve = resolve;
        }).then(onfulfilled);

        promise.cancel = function reject() {
          token.unsubscribe(_resolve);
        };

        return promise;
      };

      executor(function cancel(message) {
        if (token.reason) {
          // Cancellation has already been requested
          return;
        }

        token.reason = new require$$0$1(message);
        resolvePromise(token.reason);
      });
    }

    /**
     * Throws a `CanceledError` if cancellation has been requested.
     */
    CancelToken.prototype.throwIfRequested = function throwIfRequested() {
      if (this.reason) {
        throw this.reason;
      }
    };

    /**
     * Subscribe to the cancel signal
     */

    CancelToken.prototype.subscribe = function subscribe(listener) {
      if (this.reason) {
        listener(this.reason);
        return;
      }

      if (this._listeners) {
        this._listeners.push(listener);
      } else {
        this._listeners = [listener];
      }
    };

    /**
     * Unsubscribe from the cancel signal
     */

    CancelToken.prototype.unsubscribe = function unsubscribe(listener) {
      if (!this._listeners) {
        return;
      }
      var index = this._listeners.indexOf(listener);
      if (index !== -1) {
        this._listeners.splice(index, 1);
      }
    };

    /**
     * Returns an object that contains a new `CancelToken` and a function that, when called,
     * cancels the `CancelToken`.
     */
    CancelToken.source = function source() {
      var cancel;
      var token = new CancelToken(function executor(c) {
        cancel = c;
      });
      return {
        token: token,
        cancel: cancel
      };
    };

    var CancelToken_1 = CancelToken;

    /**
     * Syntactic sugar for invoking a function and expanding an array for arguments.
     *
     * Common use case would be to use `Function.prototype.apply`.
     *
     *  ```js
     *  function f(x, y, z) {}
     *  var args = [1, 2, 3];
     *  f.apply(null, args);
     *  ```
     *
     * With `spread` this example can be re-written.
     *
     *  ```js
     *  spread(function(x, y, z) {})([1, 2, 3]);
     *  ```
     *
     * @param {Function} callback
     * @returns {Function}
     */
    var spread = function spread(callback) {
      return function wrap(arr) {
        return callback.apply(null, arr);
      };
    };

    /**
     * Determines whether the payload is an error thrown by Axios
     *
     * @param {*} payload The value to test
     * @returns {boolean} True if the payload is an error thrown by Axios, otherwise false
     */
    var isAxiosError = function isAxiosError(payload) {
      return utils.isObject(payload) && (payload.isAxiosError === true);
    };

    var Axios = Axios_1;

    var require$$1 = CancelToken_1;

    var require$$6 = spread;

    var require$$7 = isAxiosError;

    /**
     * Create an instance of Axios
     *
     * @param {Object} defaultConfig The default config for the instance
     * @return {Axios} A new instance of Axios
     */
    function createInstance(defaultConfig) {
      var context = new Axios(defaultConfig);
      var instance = bind(Axios.prototype.request, context);

      // Copy axios.prototype to instance
      utils.extend(instance, Axios.prototype, context);

      // Copy context to instance
      utils.extend(instance, context);

      // Factory for creating new instances
      instance.create = function create(instanceConfig) {
        return createInstance(mergeConfig(defaultConfig, instanceConfig));
      };

      return instance;
    }

    // Create the default instance to be exported
    var axios$2 = createInstance(defaults);

    // Expose Axios class to allow class inheritance
    axios$2.Axios = Axios;

    // Expose Cancel & CancelToken
    axios$2.CanceledError = require$$0$1;
    axios$2.CancelToken = require$$1;
    axios$2.isCancel = require$$2;
    axios$2.VERSION = require$$3.version;
    axios$2.toFormData = require$$4;

    // Expose AxiosError class
    axios$2.AxiosError = require$$5;

    // alias for CanceledError for backward compatibility
    axios$2.Cancel = axios$2.CanceledError;

    // Expose all/spread
    axios$2.all = function all(promises) {
      return Promise.all(promises);
    };
    axios$2.spread = require$$6;

    // Expose isAxiosError
    axios$2.isAxiosError = require$$7;

    var axios_1 = axios$2;

    // Allow use of default import syntax in TypeScript
    var default_1 = axios$2;
    axios_1.default = default_1;

    var require$$0 = axios_1;

    var axios = require$$0;

    var axios$1 = axios;

    var request$1 = function (_a) {
        var _b = _a.method, method = _b === void 0 ? 'POST' : _b, url = _a.url, data = _a.data, headers = _a.headers;
        return __awaiter(void 0, void 0, void 0, function () {
            var res, err_1;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        _c.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, axios$1({
                                method: method,
                                url: url,
                                data: data,
                                headers: headers,
                            })];
                    case 1:
                        res = _c.sent();
                        if (res.data.code !== 200) {
                            return [2 /*return*/, Promise.reject(res.data)];
                        }
                        return [2 /*return*/, res.data];
                    case 2:
                        err_1 = _c.sent();
                        return [2 /*return*/, Promise.reject(err_1)];
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    var webRequestHelper = request$1;

    var request = webRequestHelper;

    var Storage = /** @class */ (function () {
        function Storage(type, salt) {
            this.store = new Map();
            this.type = 'memory';
            this.salt = '__salt__';
            type && (this.type = type);
            salt && (this.salt = salt);
        }
        Storage.prototype.get = function (key) {
            var value;
            switch (this.type) {
                case 'memory':
                    return this.store.get(key);
                case 'localStorage':
                    value = localStorage.getItem("".concat(this.salt).concat(key));
                    if (value) {
                        return JSON.parse(value);
                    }
                    return value;
                case 'sessionStorage':
                    value = sessionStorage.getItem("".concat(this.salt).concat(key));
                    if (value) {
                        return JSON.parse(value);
                    }
                    return value;
            }
        };
        Storage.prototype.set = function (key, value) {
            switch (this.type) {
                case 'memory':
                    this.store.set(key, value);
                    break;
                case 'localStorage':
                    localStorage.setItem("".concat(this.salt).concat(key), JSON.stringify(value));
                    break;
                case 'sessionStorage':
                    sessionStorage.setItem("".concat(this.salt).concat(key), JSON.stringify(value));
                    break;
            }
        };
        Storage.prototype.remove = function (key) {
            switch (this.type) {
                case 'memory':
                    this.store.delete(key);
                    break;
                case 'localStorage':
                    localStorage.removeItem("".concat(this.salt).concat(key));
                    break;
                case 'sessionStorage':
                    sessionStorage.removeItem("".concat(this.salt).concat(key));
                    break;
            }
        };
        return Storage;
    }());
    var webStorage = Storage;

    var index = webStorage;

    var url$1 = "https://statistic.live.126.net/statics/report/xkit/action";
    var EventTracking = /** @class */ (function () {
        function EventTracking(_a) {
            var appKey = _a.appKey, version = _a.version, component = _a.component, nertcVersion = _a.nertcVersion, imVersion = _a.imVersion, _b = _a.os, os = _b === void 0 ? '' : _b, _c = _a.framework, framework = _c === void 0 ? '' : _c, _d = _a.language, language = _d === void 0 ? '' : _d, _e = _a.container, container = _e === void 0 ? '' : _e, _f = _a.platform, platform = _f === void 0 ? 'Web' : _f, _g = _a.channel, channel = _g === void 0 ? 'netease' : _g;
            this.platform = platform;
            this.appKey = appKey;
            this.version = version;
            this.component = component;
            this.nertcVersion = nertcVersion;
            this.imVersion = imVersion;
            this.channel = channel;
            this.os = os;
            this.framework = framework;
            this.language = language;
            this.container = container;
        }
        EventTracking.prototype.track = function (reportType, data) {
            return __awaiter(this, void 0, void 0, function () {
                var _a, appKey, version, component, nertcVersion, imVersion, platform, channel, os, framework, language, container, timeStamp;
                return __generator(this, function (_c) {
                    switch (_c.label) {
                        case 0:
                            _a = this, appKey = _a.appKey, version = _a.version, component = _a.component, nertcVersion = _a.nertcVersion, imVersion = _a.imVersion, platform = _a.platform, channel = _a.channel, os = _a.os, framework = _a.framework, language = _a.language, container = _a.container;
                            timeStamp = Date.now();
                            _c.label = 1;
                        case 1:
                            _c.trys.push([1, 3, , 4]);
                            return [4 /*yield*/, request({
                                    method: 'POST',
                                    url: url$1,
                                    data: {
                                        appKey: appKey,
                                        version: version,
                                        component: component,
                                        timeStamp: timeStamp,
                                        nertcVersion: nertcVersion,
                                        imVersion: imVersion,
                                        platform: platform,
                                        reportType: reportType,
                                        data: data,
                                        channel: channel,
                                        os: os,
                                        framework: framework,
                                        language: language,
                                        container: container,
                                    },
                                })];
                        case 2:
                            _c.sent();
                            return [3 /*break*/, 4];
                        case 3:
                            _c.sent();
                            return [3 /*break*/, 4];
                        case 4: return [2 /*return*/];
                    }
                });
            });
        };
        return EventTracking;
    }());
    var EventTracking$1 = EventTracking;

    var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

    function createCommonjsModule(fn, module) {
    	return module = { exports: {} }, fn(module, module.exports), module.exports;
    }

    var eventemitter3 = createCommonjsModule(function (module) {

    var has = Object.prototype.hasOwnProperty
      , prefix = '~';

    /**
     * Constructor to create a storage for our `EE` objects.
     * An `Events` instance is a plain object whose properties are event names.
     *
     * @constructor
     * @private
     */
    function Events() {}

    //
    // We try to not inherit from `Object.prototype`. In some engines creating an
    // instance in this way is faster than calling `Object.create(null)` directly.
    // If `Object.create(null)` is not supported we prefix the event names with a
    // character to make sure that the built-in object properties are not
    // overridden or used as an attack vector.
    //
    if (Object.create) {
      Events.prototype = Object.create(null);

      //
      // This hack is needed because the `__proto__` property is still inherited in
      // some old browsers like Android 4, iPhone 5.1, Opera 11 and Safari 5.
      //
      if (!new Events().__proto__) prefix = false;
    }

    /**
     * Representation of a single event listener.
     *
     * @param {Function} fn The listener function.
     * @param {*} context The context to invoke the listener with.
     * @param {Boolean} [once=false] Specify if the listener is a one-time listener.
     * @constructor
     * @private
     */
    function EE(fn, context, once) {
      this.fn = fn;
      this.context = context;
      this.once = once || false;
    }

    /**
     * Add a listener for a given event.
     *
     * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.
     * @param {(String|Symbol)} event The event name.
     * @param {Function} fn The listener function.
     * @param {*} context The context to invoke the listener with.
     * @param {Boolean} once Specify if the listener is a one-time listener.
     * @returns {EventEmitter}
     * @private
     */
    function addListener(emitter, event, fn, context, once) {
      if (typeof fn !== 'function') {
        throw new TypeError('The listener must be a function');
      }

      var listener = new EE(fn, context || emitter, once)
        , evt = prefix ? prefix + event : event;

      if (!emitter._events[evt]) emitter._events[evt] = listener, emitter._eventsCount++;
      else if (!emitter._events[evt].fn) emitter._events[evt].push(listener);
      else emitter._events[evt] = [emitter._events[evt], listener];

      return emitter;
    }

    /**
     * Clear event by name.
     *
     * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.
     * @param {(String|Symbol)} evt The Event name.
     * @private
     */
    function clearEvent(emitter, evt) {
      if (--emitter._eventsCount === 0) emitter._events = new Events();
      else delete emitter._events[evt];
    }

    /**
     * Minimal `EventEmitter` interface that is molded against the Node.js
     * `EventEmitter` interface.
     *
     * @constructor
     * @public
     */
    function EventEmitter() {
      this._events = new Events();
      this._eventsCount = 0;
    }

    /**
     * Return an array listing the events for which the emitter has registered
     * listeners.
     *
     * @returns {Array}
     * @public
     */
    EventEmitter.prototype.eventNames = function eventNames() {
      var names = []
        , events
        , name;

      if (this._eventsCount === 0) return names;

      for (name in (events = this._events)) {
        if (has.call(events, name)) names.push(prefix ? name.slice(1) : name);
      }

      if (Object.getOwnPropertySymbols) {
        return names.concat(Object.getOwnPropertySymbols(events));
      }

      return names;
    };

    /**
     * Return the listeners registered for a given event.
     *
     * @param {(String|Symbol)} event The event name.
     * @returns {Array} The registered listeners.
     * @public
     */
    EventEmitter.prototype.listeners = function listeners(event) {
      var evt = prefix ? prefix + event : event
        , handlers = this._events[evt];

      if (!handlers) return [];
      if (handlers.fn) return [handlers.fn];

      for (var i = 0, l = handlers.length, ee = new Array(l); i < l; i++) {
        ee[i] = handlers[i].fn;
      }

      return ee;
    };

    /**
     * Return the number of listeners listening to a given event.
     *
     * @param {(String|Symbol)} event The event name.
     * @returns {Number} The number of listeners.
     * @public
     */
    EventEmitter.prototype.listenerCount = function listenerCount(event) {
      var evt = prefix ? prefix + event : event
        , listeners = this._events[evt];

      if (!listeners) return 0;
      if (listeners.fn) return 1;
      return listeners.length;
    };

    /**
     * Calls each of the listeners registered for a given event.
     *
     * @param {(String|Symbol)} event The event name.
     * @returns {Boolean} `true` if the event had listeners, else `false`.
     * @public
     */
    EventEmitter.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {
      var evt = prefix ? prefix + event : event;

      if (!this._events[evt]) return false;

      var listeners = this._events[evt]
        , len = arguments.length
        , args
        , i;

      if (listeners.fn) {
        if (listeners.once) this.removeListener(event, listeners.fn, undefined, true);

        switch (len) {
          case 1: return listeners.fn.call(listeners.context), true;
          case 2: return listeners.fn.call(listeners.context, a1), true;
          case 3: return listeners.fn.call(listeners.context, a1, a2), true;
          case 4: return listeners.fn.call(listeners.context, a1, a2, a3), true;
          case 5: return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;
          case 6: return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;
        }

        for (i = 1, args = new Array(len -1); i < len; i++) {
          args[i - 1] = arguments[i];
        }

        listeners.fn.apply(listeners.context, args);
      } else {
        var length = listeners.length
          , j;

        for (i = 0; i < length; i++) {
          if (listeners[i].once) this.removeListener(event, listeners[i].fn, undefined, true);

          switch (len) {
            case 1: listeners[i].fn.call(listeners[i].context); break;
            case 2: listeners[i].fn.call(listeners[i].context, a1); break;
            case 3: listeners[i].fn.call(listeners[i].context, a1, a2); break;
            case 4: listeners[i].fn.call(listeners[i].context, a1, a2, a3); break;
            default:
              if (!args) for (j = 1, args = new Array(len -1); j < len; j++) {
                args[j - 1] = arguments[j];
              }

              listeners[i].fn.apply(listeners[i].context, args);
          }
        }
      }

      return true;
    };

    /**
     * Add a listener for a given event.
     *
     * @param {(String|Symbol)} event The event name.
     * @param {Function} fn The listener function.
     * @param {*} [context=this] The context to invoke the listener with.
     * @returns {EventEmitter} `this`.
     * @public
     */
    EventEmitter.prototype.on = function on(event, fn, context) {
      return addListener(this, event, fn, context, false);
    };

    /**
     * Add a one-time listener for a given event.
     *
     * @param {(String|Symbol)} event The event name.
     * @param {Function} fn The listener function.
     * @param {*} [context=this] The context to invoke the listener with.
     * @returns {EventEmitter} `this`.
     * @public
     */
    EventEmitter.prototype.once = function once(event, fn, context) {
      return addListener(this, event, fn, context, true);
    };

    /**
     * Remove the listeners of a given event.
     *
     * @param {(String|Symbol)} event The event name.
     * @param {Function} fn Only remove the listeners that match this function.
     * @param {*} context Only remove the listeners that have this context.
     * @param {Boolean} once Only remove one-time listeners.
     * @returns {EventEmitter} `this`.
     * @public
     */
    EventEmitter.prototype.removeListener = function removeListener(event, fn, context, once) {
      var evt = prefix ? prefix + event : event;

      if (!this._events[evt]) return this;
      if (!fn) {
        clearEvent(this, evt);
        return this;
      }

      var listeners = this._events[evt];

      if (listeners.fn) {
        if (
          listeners.fn === fn &&
          (!once || listeners.once) &&
          (!context || listeners.context === context)
        ) {
          clearEvent(this, evt);
        }
      } else {
        for (var i = 0, events = [], length = listeners.length; i < length; i++) {
          if (
            listeners[i].fn !== fn ||
            (once && !listeners[i].once) ||
            (context && listeners[i].context !== context)
          ) {
            events.push(listeners[i]);
          }
        }

        //
        // Reset the array, or remove it completely if we have no more listeners.
        //
        if (events.length) this._events[evt] = events.length === 1 ? events[0] : events;
        else clearEvent(this, evt);
      }

      return this;
    };

    /**
     * Remove all listeners, or those of the specified event.
     *
     * @param {(String|Symbol)} [event] The event name.
     * @returns {EventEmitter} `this`.
     * @public
     */
    EventEmitter.prototype.removeAllListeners = function removeAllListeners(event) {
      var evt;

      if (event) {
        evt = prefix ? prefix + event : event;
        if (this._events[evt]) clearEvent(this, evt);
      } else {
        this._events = new Events();
        this._eventsCount = 0;
      }

      return this;
    };

    //
    // Alias methods names because people roll like that.
    //
    EventEmitter.prototype.off = EventEmitter.prototype.removeListener;
    EventEmitter.prototype.addListener = EventEmitter.prototype.on;

    //
    // Expose the prefix.
    //
    EventEmitter.prefixed = prefix;

    //
    // Allow `EventEmitter` to be imported as module namespace.
    //
    EventEmitter.EventEmitter = EventEmitter;

    //
    // Expose the module.
    //
    {
      module.exports = EventEmitter;
    }
    });

    var EventEmitter = eventemitter3;

    /**
     * 判断元素是否可见
     * 融合了 IntersectionObserver 与 visibilityChange 事件
     */
    var VisibilityObserver = /** @class */ (function (_super) {
        __extends(VisibilityObserver, _super);
        // 入参说明参考：https://developer.mozilla.org/zh-CN/docs/Web/API/Intersection_Observer_API
        function VisibilityObserver(options) {
            var _this = _super.call(this) || this;
            _this.visibilityState = document.visibilityState;
            _this.entries = [];
            _this._visibilitychange = function () {
                _this.visibilityState = document.visibilityState;
                _this._trigger();
            };
            _this.intersectionObserver = new IntersectionObserver(_this._intersectionObserverHandler.bind(_this), options);
            document.addEventListener('visibilitychange', _this._visibilitychange);
            return _this;
        }
        VisibilityObserver.prototype.observe = function (target) {
            return this.intersectionObserver.observe(target);
        };
        VisibilityObserver.prototype.unobserve = function (target) {
            return this.intersectionObserver.unobserve(target);
        };
        VisibilityObserver.prototype.destroy = function () {
            this.intersectionObserver.disconnect();
            document.removeEventListener('visibilitychange', this._visibilitychange);
            this.entries = [];
        };
        VisibilityObserver.prototype._intersectionObserverHandler = function (entries) {
            this.entries = entries;
            this._trigger();
        };
        VisibilityObserver.prototype._trigger = function () {
            var _this = this;
            this.entries.forEach(function (item) {
                if (_this.visibilityState !== 'visible' || item.intersectionRatio <= 0) {
                    _this.emit('visibleChange', {
                        visible: false,
                        target: item.target,
                    });
                    return;
                }
                _this.emit('visibleChange', {
                    visible: true,
                    target: item.target,
                });
            });
        };
        return VisibilityObserver;
    }(EventEmitter));
    var VisibilityObserver$1 = VisibilityObserver;

    var loglevel = createCommonjsModule(function (module) {
    /*
    * loglevel - https://github.com/pimterry/loglevel
    *
    * Copyright (c) 2013 Tim Perry
    * Licensed under the MIT license.
    */
    (function (root, definition) {
        if (module.exports) {
            module.exports = definition();
        } else {
            root.log = definition();
        }
    }(commonjsGlobal, function () {

        // Slightly dubious tricks to cut down minimized file size
        var noop = function() {};
        var undefinedType = "undefined";
        var isIE = (typeof window !== undefinedType) && (typeof window.navigator !== undefinedType) && (
            /Trident\/|MSIE /.test(window.navigator.userAgent)
        );

        var logMethods = [
            "trace",
            "debug",
            "info",
            "warn",
            "error"
        ];

        var _loggersByName = {};
        var defaultLogger = null;

        // Cross-browser bind equivalent that works at least back to IE6
        function bindMethod(obj, methodName) {
            var method = obj[methodName];
            if (typeof method.bind === 'function') {
                return method.bind(obj);
            } else {
                try {
                    return Function.prototype.bind.call(method, obj);
                } catch (e) {
                    // Missing bind shim or IE8 + Modernizr, fallback to wrapping
                    return function() {
                        return Function.prototype.apply.apply(method, [obj, arguments]);
                    };
                }
            }
        }

        // Trace() doesn't print the message in IE, so for that case we need to wrap it
        function traceForIE() {
            if (console.log) {
                if (console.log.apply) {
                    console.log.apply(console, arguments);
                } else {
                    // In old IE, native console methods themselves don't have apply().
                    Function.prototype.apply.apply(console.log, [console, arguments]);
                }
            }
            if (console.trace) console.trace();
        }

        // Build the best logging method possible for this env
        // Wherever possible we want to bind, not wrap, to preserve stack traces
        function realMethod(methodName) {
            if (methodName === 'debug') {
                methodName = 'log';
            }

            if (typeof console === undefinedType) {
                return false; // No method possible, for now - fixed later by enableLoggingWhenConsoleArrives
            } else if (methodName === 'trace' && isIE) {
                return traceForIE;
            } else if (console[methodName] !== undefined) {
                return bindMethod(console, methodName);
            } else if (console.log !== undefined) {
                return bindMethod(console, 'log');
            } else {
                return noop;
            }
        }

        // These private functions always need `this` to be set properly

        function replaceLoggingMethods() {
            /*jshint validthis:true */
            var level = this.getLevel();

            // Replace the actual methods.
            for (var i = 0; i < logMethods.length; i++) {
                var methodName = logMethods[i];
                this[methodName] = (i < level) ?
                    noop :
                    this.methodFactory(methodName, level, this.name);
            }

            // Define log.log as an alias for log.debug
            this.log = this.debug;

            // Return any important warnings.
            if (typeof console === undefinedType && level < this.levels.SILENT) {
                return "No console available for logging";
            }
        }

        // In old IE versions, the console isn't present until you first open it.
        // We build realMethod() replacements here that regenerate logging methods
        function enableLoggingWhenConsoleArrives(methodName) {
            return function () {
                if (typeof console !== undefinedType) {
                    replaceLoggingMethods.call(this);
                    this[methodName].apply(this, arguments);
                }
            };
        }

        // By default, we use closely bound real methods wherever possible, and
        // otherwise we wait for a console to appear, and then try again.
        function defaultMethodFactory(methodName, _level, _loggerName) {
            /*jshint validthis:true */
            return realMethod(methodName) ||
                   enableLoggingWhenConsoleArrives.apply(this, arguments);
        }

        function Logger(name, factory) {
          // Private instance variables.
          var self = this;
          /**
           * The level inherited from a parent logger (or a global default). We
           * cache this here rather than delegating to the parent so that it stays
           * in sync with the actual logging methods that we have installed (the
           * parent could change levels but we might not have rebuilt the loggers
           * in this child yet).
           * @type {number}
           */
          var inheritedLevel;
          /**
           * The default level for this logger, if any. If set, this overrides
           * `inheritedLevel`.
           * @type {number|null}
           */
          var defaultLevel;
          /**
           * A user-specific level for this logger. If set, this overrides
           * `defaultLevel`.
           * @type {number|null}
           */
          var userLevel;

          var storageKey = "loglevel";
          if (typeof name === "string") {
            storageKey += ":" + name;
          } else if (typeof name === "symbol") {
            storageKey = undefined;
          }

          function persistLevelIfPossible(levelNum) {
              var levelName = (logMethods[levelNum] || 'silent').toUpperCase();

              if (typeof window === undefinedType || !storageKey) return;

              // Use localStorage if available
              try {
                  window.localStorage[storageKey] = levelName;
                  return;
              } catch (ignore) {}

              // Use session cookie as fallback
              try {
                  window.document.cookie =
                    encodeURIComponent(storageKey) + "=" + levelName + ";";
              } catch (ignore) {}
          }

          function getPersistedLevel() {
              var storedLevel;

              if (typeof window === undefinedType || !storageKey) return;

              try {
                  storedLevel = window.localStorage[storageKey];
              } catch (ignore) {}

              // Fallback to cookies if local storage gives us nothing
              if (typeof storedLevel === undefinedType) {
                  try {
                      var cookie = window.document.cookie;
                      var cookieName = encodeURIComponent(storageKey);
                      var location = cookie.indexOf(cookieName + "=");
                      if (location !== -1) {
                          storedLevel = /^([^;]+)/.exec(
                              cookie.slice(location + cookieName.length + 1)
                          )[1];
                      }
                  } catch (ignore) {}
              }

              // If the stored level is not valid, treat it as if nothing was stored.
              if (self.levels[storedLevel] === undefined) {
                  storedLevel = undefined;
              }

              return storedLevel;
          }

          function clearPersistedLevel() {
              if (typeof window === undefinedType || !storageKey) return;

              // Use localStorage if available
              try {
                  window.localStorage.removeItem(storageKey);
              } catch (ignore) {}

              // Use session cookie as fallback
              try {
                  window.document.cookie =
                    encodeURIComponent(storageKey) + "=; expires=Thu, 01 Jan 1970 00:00:00 UTC";
              } catch (ignore) {}
          }

          function normalizeLevel(input) {
              var level = input;
              if (typeof level === "string" && self.levels[level.toUpperCase()] !== undefined) {
                  level = self.levels[level.toUpperCase()];
              }
              if (typeof level === "number" && level >= 0 && level <= self.levels.SILENT) {
                  return level;
              } else {
                  throw new TypeError("log.setLevel() called with invalid level: " + input);
              }
          }

          /*
           *
           * Public logger API - see https://github.com/pimterry/loglevel for details
           *
           */

          self.name = name;

          self.levels = { "TRACE": 0, "DEBUG": 1, "INFO": 2, "WARN": 3,
              "ERROR": 4, "SILENT": 5};

          self.methodFactory = factory || defaultMethodFactory;

          self.getLevel = function () {
              if (userLevel != null) {
                return userLevel;
              } else if (defaultLevel != null) {
                return defaultLevel;
              } else {
                return inheritedLevel;
              }
          };

          self.setLevel = function (level, persist) {
              userLevel = normalizeLevel(level);
              if (persist !== false) {  // defaults to true
                  persistLevelIfPossible(userLevel);
              }

              // NOTE: in v2, this should call rebuild(), which updates children.
              return replaceLoggingMethods.call(self);
          };

          self.setDefaultLevel = function (level) {
              defaultLevel = normalizeLevel(level);
              if (!getPersistedLevel()) {
                  self.setLevel(level, false);
              }
          };

          self.resetLevel = function () {
              userLevel = null;
              clearPersistedLevel();
              replaceLoggingMethods.call(self);
          };

          self.enableAll = function(persist) {
              self.setLevel(self.levels.TRACE, persist);
          };

          self.disableAll = function(persist) {
              self.setLevel(self.levels.SILENT, persist);
          };

          self.rebuild = function () {
              if (defaultLogger !== self) {
                  inheritedLevel = normalizeLevel(defaultLogger.getLevel());
              }
              replaceLoggingMethods.call(self);

              if (defaultLogger === self) {
                  for (var childName in _loggersByName) {
                    _loggersByName[childName].rebuild();
                  }
              }
          };

          // Initialize all the internal levels.
          inheritedLevel = normalizeLevel(
              defaultLogger ? defaultLogger.getLevel() : "WARN"
          );
          var initialLevel = getPersistedLevel();
          if (initialLevel != null) {
              userLevel = normalizeLevel(initialLevel);
          }
          replaceLoggingMethods.call(self);
        }

        /*
         *
         * Top-level API
         *
         */

        defaultLogger = new Logger();

        defaultLogger.getLogger = function getLogger(name) {
            if ((typeof name !== "symbol" && typeof name !== "string") || name === "") {
                throw new TypeError("You must supply a name when creating a logger.");
            }

            var logger = _loggersByName[name];
            if (!logger) {
                logger = _loggersByName[name] = new Logger(
                    name,
                    defaultLogger.methodFactory
                );
            }
            return logger;
        };

        // Grab the current global log variable in case of overwrite
        var _log = (typeof window !== undefinedType) ? window.log : undefined;
        defaultLogger.noConflict = function() {
            if (typeof window !== undefinedType &&
                   window.log === defaultLogger) {
                window.log = _log;
            }

            return defaultLogger;
        };

        defaultLogger.getLoggers = function getLoggers() {
            return _loggersByName;
        };

        // ES6 default export, for compatibility
        defaultLogger['default'] = defaultLogger;

        return defaultLogger;
    }));
    });

    var log = loglevel;

    function createLoggerDecorator(MODULE_NAME, logger) {
        return function (__, propKey, descriptor) {
            var method = descriptor.value;
            descriptor.value = function () {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i] = arguments[_i];
                }
                return __awaiter(this, void 0, void 0, function () {
                    var methodName, res, err_1;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                if (!logger) {
                                    // @ts-ignore
                                    logger = this.logger;
                                }
                                if (['log', 'error'].some(function (item) { return !logger[item]; })) {
                                    console.warn('loggerDecorator warning: your logger is not complete');
                                }
                                methodName = method.name || propKey || '';
                                _a.label = 1;
                            case 1:
                                _a.trys.push([1, 3, , 4]);
                                logger === null || logger === void 0 ? void 0 : logger.log.apply(logger, __spreadArray([MODULE_NAME, methodName], __read(args), false));
                                return [4 /*yield*/, method.apply(this, args)];
                            case 2:
                                res = _a.sent();
                                logger === null || logger === void 0 ? void 0 : logger.log(MODULE_NAME, "".concat(methodName, " success: "), res);
                                return [2 /*return*/, res];
                            case 3:
                                err_1 = _a.sent();
                                logger === null || logger === void 0 ? void 0 : logger.error(MODULE_NAME, "".concat(methodName, " failed: "), err_1);
                                throw err_1;
                            case 4: return [2 /*return*/];
                        }
                    });
                });
            };
        };
    }

    function sensitiveInfoFilter(content) {
        var regexs = [
            'scene/apps/[a-z0-9]{32}/',
            '"rtcKey":"[a-z0-9]{32}"',
            '"imKey":"[a-z0-9]{32}"',
            '"appkey":"[a-z0-9]{32}"',
            '"appkey": "[a-z0-9]{32}"',
            'appkey:"[a-z0-9]{32}"',
            'appkey: "[a-z0-9]{32}"',
            '"appkey":[a-z0-9]{32}',
            '"appkey": [a-z0-9]{32}',
            'appkey:[a-z0-9]{32}',
            'appkey: [a-z0-9]{32}',
        ];
        var templates = [
            'scene/apps/***/',
            '"rtcKey":"***"',
            '"imKey":"***"',
            '"appkey":"***"',
            '"appkey": "***"',
            'appkey:"***"',
            'appkey: "***"',
            '"appkey":***',
            '"appkey": ***',
            'appkey:***',
            'appkey: ***',
        ];
        regexs.forEach(function (regex, index) {
            var reg = new RegExp(regex, 'gi');
            content = content.replace(reg, templates[index]);
        });
        return content;
    }
    var logDebug = function (_a) {
        var _b = _a === void 0 ? {
            appName: '',
            version: '',
            storeWindow: false,
            needStringify: true,
        } : _a, level = _b.level, _c = _b.appName, appName = _c === void 0 ? '' : _c, _d = _b.storeWindow, storeWindow = _d === void 0 ? false : _d, _e = _b.needStringify, needStringify = _e === void 0 ? true : _e;
        var genTime = function () {
            var now = new Date();
            var year = now.getFullYear();
            var month = now.getMonth() + 1;
            var day = now.getDate();
            var hour = now.getHours() < 10 ? "0".concat(now.getHours()) : now.getHours();
            var min = now.getMinutes() < 10 ? "0".concat(now.getMinutes()) : now.getMinutes();
            var s = now.getSeconds() < 10 ? "0".concat(now.getSeconds()) : now.getSeconds();
            var nowString = "".concat(year, "-").concat(month, "-").concat(day, " ").concat(hour, ":").concat(min, ":").concat(s);
            return nowString;
        };
        var genUserAgent = function () {
            try {
                var ua = navigator.userAgent.toLocaleLowerCase();
                var re = /(msie|firefox|chrome|opera|version).*?([\d.]+)/;
                var m = ua.match(re) || [];
                var browser = m[1].replace(/version/, 'safari');
                var ver = m[2];
                return {
                    browser: browser,
                    ver: ver,
                };
            }
            catch (error) {
                return null;
            }
        };
        var proxyLog = function () {
            var _log = new Proxy(log, {
                get: function (target, prop) {
                    var _a, _b;
                    if (!(prop in target)) {
                        return;
                    }
                    var func = target[prop];
                    if (!['log', 'info', 'warn', 'error', 'trace', 'debug'].includes(prop)) {
                        return func;
                    }
                    var prefix = genTime();
                    if (genUserAgent()) {
                        prefix += "[".concat((_a = genUserAgent()) === null || _a === void 0 ? void 0 : _a.browser, " ").concat((_b = genUserAgent()) === null || _b === void 0 ? void 0 : _b.ver, "]");
                    }
                    prefix +=
                        "[".concat({
                            log: 'L',
                            info: 'I',
                            warn: 'W',
                            error: 'E',
                            trace: 'E',
                            debug: 'D',
                        }[prop], "]") +
                            "[".concat(appName, "]") +
                            ':';
                    // eslint-disable-next-line @typescript-eslint/no-this-alias
                    var that = this;
                    return function () {
                        var args = [];
                        for (var _i = 0; _i < arguments.length; _i++) {
                            args[_i] = arguments[_i];
                        }
                        if (needStringify) {
                            for (var i = 0; i < args.length; i++) {
                                if (typeof args[i] === 'object') {
                                    try {
                                        args[i] = JSON.stringify(args[i]);
                                    }
                                    catch (_a) {
                                        console.warn('[日志打印对象无法序列化]', args[i]);
                                    }
                                }
                                if (typeof args[i] === 'string') {
                                    args[i] = sensitiveInfoFilter(args[i]);
                                }
                            }
                        }
                        return func.apply(that, __spreadArray([prefix], __read(args), false));
                    };
                },
            });
            return _log;
        };
        var logger = proxyLog();
        if (level) {
            logger.setLevel(level);
        }
        if (storeWindow) {
            // @ts-ignore
            window.__LOGGER__ = logger;
        }
        return logger;
    };
    var logDebug$1 = logDebug;

    exports.EventPriority = void 0;
    (function (EventPriority) {
        EventPriority[EventPriority["LOW"] = 0] = "LOW";
        EventPriority[EventPriority["NORMAL"] = 1] = "NORMAL";
        EventPriority[EventPriority["HIGH"] = 2] = "HIGH";
    })(exports.EventPriority || (exports.EventPriority = {}));
    var ReportEvent = /** @class */ (function () {
        // private _report: XKitReporter
        function ReportEvent(options) {
            // static appInfo: AppInfo
            this.appKey = '';
            this.component = '';
            this.data = {};
            this.framework = '';
            this.version = '';
            this.startTime = 0;
            this.endTime = 0;
            this.duration = 0;
            this.data.startTime = new Date().getTime();
            this.data.timeStamp = this.data.startTime;
            this.eventId = options.eventId;
            this.priority = options.priority;
        }
        ReportEvent.prototype.end = function () {
            // 如果已经end过 不再end
            if (this.data.endTime && this.data.duration) {
                return;
            }
            this.data.endTime = this.data.endTime || new Date().getTime();
            this.data.duration =
                this.data.duration || this.data.endTime - this.data.startTime;
        };
        ReportEvent.prototype.setAppInfo = function (appInfo) {
            this.appKey = appInfo.appKey;
            this.component = appInfo.component;
            this.version = appInfo.version;
            if (appInfo.framework) {
                this.framework = appInfo.framework;
            }
        };
        ReportEvent.prototype.endWith = function (data) {
            var code = data.code, msg = data.msg, requestId = data.requestId, serverCost = data.serverCost;
            // 过滤code非number类型
            if (typeof code != 'number') {
                this.data.code = -2;
            }
            else {
                this.data.code = code;
            }
            this.data.message = msg;
            this.data.requestId = requestId;
            this.data.serverCost = serverCost;
            this.end();
        };
        ReportEvent.prototype.endWithSuccess = function (data) {
            if (data) {
                var requestId = data.requestId, serverCost = data.serverCost;
                this.data.requestId = requestId;
                this.data.serverCost = serverCost;
            }
            this.data.code = 0;
            this.data.message = 'success';
            this.end();
        };
        ReportEvent.prototype.endWithFailure = function (data) {
            if (data) {
                var requestId = data.requestId, serverCost = data.serverCost;
                this.data.requestId = requestId;
                this.data.serverCost = serverCost;
            }
            this.data.code = -1;
            this.data.message = 'failure';
            this.end();
        };
        ReportEvent.prototype.setParams = function (params) {
            this.data.params = __assign({}, params);
            return this;
        };
        ReportEvent.prototype.addParams = function (params) {
            this.data.params = __assign(__assign({}, this.data.params), params);
            return this;
        };
        ReportEvent.prototype.setData = function (data) {
            this.data = __assign(__assign({}, this.data), data);
        };
        ReportEvent.prototype.setUserId = function (userId) {
            this.data.userId = userId;
        };
        return ReportEvent;
    }());
    var EventStep = /** @class */ (function (_super) {
        __extends(EventStep, _super);
        function EventStep(options) {
            return _super.call(this, options) || this;
        }
        return EventStep;
    }(ReportEvent));
    var IntervalEvent = /** @class */ (function (_super) {
        __extends(IntervalEvent, _super);
        function IntervalEvent(options) {
            var _this = _super.call(this, options) || this;
            _this._stepMap = new Map();
            return _this;
        }
        IntervalEvent.prototype.beginStep = function (name) {
            if (this._stepMap.has(name)) {
                return this._stepMap[name];
            }
            var step = new EventStep({ eventId: name, priority: this.priority });
            step.setData({ step: name });
            this._stepMap.set(name, step);
            return step;
        };
        IntervalEvent.prototype.addStep = function (data) {
            this._stepMap.set(data.eventId, data);
        };
        IntervalEvent.prototype.removeStep = function (eventId) {
            this._stepMap.delete(eventId);
        };
        IntervalEvent.prototype.endWith = function (data) {
            _super.prototype.endWith.call(this, data);
            this.end();
        };
        IntervalEvent.prototype.endWithSuccess = function (data) {
            _super.prototype.endWithSuccess.call(this, data);
            this.end();
        };
        IntervalEvent.prototype.endWithFailure = function (data) {
            _super.prototype.endWithFailure.call(this, data);
            this.end();
        };
        IntervalEvent.prototype.end = function () {
            var e_1, _a;
            var steps = [];
            _super.prototype.end.call(this);
            try {
                for (var _b = __values(this._stepMap.values()), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var step = _c.value;
                    // step.end()
                    step.data.index = steps.length;
                    steps.push(step.data);
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_1) throw e_1.error; }
            }
            if (steps.length > 0) {
                this.data.steps = steps;
            }
        };
        return IntervalEvent;
    }(EventStep));

    /**
     * 异步频率控制
     * 一段时间内只请求一次，多余的用这一次执行的结果做为结果
     * @param fn
     * @param delay
     */
    var frequencyControl = function (fn, delay) {
        var queue = [];
        var last = 0;
        var timer;
        return function () {
            var _this = this;
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            return new Promise(function (resolve, reject) {
                queue.push({ resolve: resolve, reject: reject });
                var cur = Date.now();
                var consumer = function (success, res) {
                    while (queue.length) {
                        var _a = queue.shift(), resolve_1 = _a.resolve, reject_1 = _a.reject;
                        success ? resolve_1(res) : reject_1(res);
                    }
                };
                var excute = function () {
                    last = cur;
                    if (!queue.length)
                        return;
                    // @ts-ignore
                    fn.apply(_this, args).then(function (res) {
                        consumer(true, res);
                    }, function (err) {
                        consumer(false, err);
                    });
                };
                if (cur - last > delay) {
                    excute();
                }
                else {
                    clearTimeout(timer);
                    timer = setTimeout(function () {
                        excute();
                    }, delay);
                }
            });
        };
    };
    function getFileType(filename) {
        var fileMap = {
            img: /(png|gif|jpg)/i,
            pdf: /pdf$/i,
            word: /(doc|docx)$/i,
            excel: /(xls|xlsx)$/i,
            ppt: /(ppt|pptx)$/i,
            zip: /(zip|rar|7z)$/i,
            audio: /(mp3|wav|wmv)$/i,
            video: /(mp4|mkv|rmvb|wmv|avi|flv|mov)$/i,
        };
        return Object.keys(fileMap).find(function (type) { return fileMap[type].test(filename); }) || '';
    }
    /**
     * 解析输入的文件大小
     * @param size 文件大小，单位b
     * @param level 递归等级，对应fileSizeMap
     */
    var parseFileSize = function (size, level) {
        if (level === void 0) { level = 0; }
        var fileSizeMap = {
            0: 'B',
            1: 'KB',
            2: 'MB',
            3: 'GB',
            4: 'TB',
        };
        var handler = function (size, level) {
            if (level >= Object.keys(fileSizeMap).length) {
                return 'the file is too big';
            }
            if (size < 1024) {
                return "".concat(size).concat(fileSizeMap[level]);
            }
            return handler(Math.round(size / 1024), level + 1);
        };
        return handler(size, level);
    };
    var addUrlSearch = function (url, search) {
        var urlObj = new URL(url);
        urlObj.search += (urlObj.search.startsWith('?') ? '&' : '?') + search;
        return urlObj.href;
    };
    function debounce(fn, wait) {
        var timer = null;
        return function () {
            var _this = this;
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            if (timer) {
                clearTimeout(timer);
                timer = null;
            }
            timer = setTimeout(function () {
                // @ts-ignore
                fn.apply(_this, args);
            }, wait);
        };
    }
    function getOperatingSystem() {
        try {
            var userAgent = navigator.userAgent;
            if (userAgent.includes('Windows')) {
                return 'Windows';
            }
            else if (userAgent.includes('Mac OS')) {
                return 'Mac OS';
            }
            else if (userAgent.includes('Linux')) {
                return 'Linux';
            }
            else if (userAgent.includes('Android')) {
                return 'Android';
            }
            else if (userAgent.includes('iOS')) {
                return 'iOS';
            }
            else {
                return 'Unknown';
            }
        }
        catch (_a) {
            return 'Unknown';
        }
    }
    function getBrowserInfo() {
        var browserName = 'Unknown';
        var browserVersion = '';
        try {
            var userAgent = navigator.userAgent;
            // 判断是否为Chrome浏览器
            if (userAgent.indexOf('Chrome') !== -1) {
                browserName = 'Chrome';
                var start = userAgent.indexOf('Chrome') + 7;
                var end = userAgent.indexOf(' ', start);
                browserVersion = userAgent.substring(start, end);
            }
            // 判断是否为Firefox浏览器
            else if (userAgent.indexOf('Firefox') !== -1) {
                browserName = 'Firefox';
                var start = userAgent.indexOf('Firefox') + 8;
                browserVersion = userAgent.substring(start);
            }
            // 判断是否为Safari浏览器
            else if (userAgent.indexOf('Safari') !== -1) {
                browserName = 'Safari';
                var start = userAgent.indexOf('Version') + 8;
                var end = userAgent.indexOf(' ', start);
                browserVersion = userAgent.substring(start, end);
            }
            // 判断是否为Edge浏览器
            else if (userAgent.indexOf('Edg') !== -1) {
                browserName = 'Edge';
                var start = userAgent.indexOf('Edg') + 4;
                browserVersion = userAgent.substring(start);
            }
            // 判断是否为IE浏览器（IE11及以下版本）
            else if (userAgent.indexOf('MSIE') !== -1) {
                browserName = 'Internet Explorer';
                var start = userAgent.indexOf('MSIE') + 5;
                var end = userAgent.indexOf(';', start);
                browserVersion = userAgent.substring(start, end);
            }
        }
        catch (error) {
            console.error('getBrowserInfo error:', error);
        }
        return {
            name: browserName,
            version: browserVersion,
        };
    }

    var url = "https://statistic.live.126.net/statics/report/common/form";
    var HEADER_VALUE_SDK_TYPE = 'NEXKitStatistics';
    var HEADER_VALUE_REPORTER_VERSION = '1.0.0';
    var HEADER_VALUE_CONTENT_TYPE = 'application/json;charset=utf-8';
    var EVENT_REPORT_INTERVAL = 5000;
    var MAX_EVENT_CACHE_SIZE = 100;
    var LOW_PRIORITY_RETRY = 0;
    var NORMAL_PRIORITY_RETRY = 2;
    var HIGH_PRIORITY_RETRY = 5;
    var MAX_RETRY_COUNT = 3;
    var XKitReporter = /** @class */ (function () {
        function XKitReporter(options) {
            this._eventsCache = [];
            this._noReport = false; // 是否上报数据
            this._configMap = new Map();
            this._retryCount = 0;
            var browserInfo = getBrowserInfo();
            var appInfo = window.__XKitReporter__;
            var userAgent = '';
            try {
                userAgent = navigator.userAgent;
            }
            catch (_a) {
                console.log('navigator is not defined');
            }
            this.common = {
                imVersion: options.imVersion,
                nertcVersion: options.nertcVersion,
                platform: 'Web',
                osVer: browserInfo.version,
                userAgent: userAgent,
                manufacturer: '',
                model: browserInfo.name,
                packageId: (appInfo === null || appInfo === void 0 ? void 0 : appInfo.packageId) || '',
                appVer: (appInfo === null || appInfo === void 0 ? void 0 : appInfo.appVer) || '',
                appName: (appInfo === null || appInfo === void 0 ? void 0 : appInfo.appName) || '',
                deviceId: options.deviceId,
            };
            this._logger = logDebug$1({
                level: 'debug',
                appName: 'XKitReporter',
                version: '2.0.0',
            });
        }
        XKitReporter.prototype.getConfig = function (appKey) {
            return __awaiter(this, void 0, void 0, function () {
                var _this = this;
                return __generator(this, function (_a) {
                    return [2 /*return*/, axios$1({
                            method: 'GET',
                            url: 'https://yiyong.netease.im/report_conf',
                            headers: {
                                platform: 'web',
                                appKey: appKey,
                            },
                        })
                            .then(function (res) {
                            _this._configMap.set(appKey, res.data);
                        })
                            .catch(function () {
                            _this._retryCount += 1;
                            if (_this._retryCount > MAX_RETRY_COUNT) {
                                _this._retryCount = 0;
                                return;
                            }
                            _this.getConfig(appKey);
                        })];
                });
            });
        };
        XKitReporter.prototype.setNoReport = function (noReport) {
            this._noReport = noReport;
        };
        XKitReporter.prototype.reportEvent = function (event, options) {
            // 如果禁止上包则返回
            if (this._noReport) {
                return;
            }
            if (this._eventsCache.length >= MAX_EVENT_CACHE_SIZE) {
                this._evictEvent(event);
            }
            else {
                this._eventsCache.push(event);
            }
            this._scheduleReportEventsTask(options === null || options === void 0 ? void 0 : options.immediate);
        };
        XKitReporter.prototype._evictEvent = function (event) {
            var index = this._eventsCache.findIndex(function (item) { return item.priority < event.priority; });
            this._eventsCache.push(event);
            if (index !== -1) {
                this._evictEvent(this._eventsCache[index]);
            }
            else {
                this._logger.debug('Full event cache, evict event:', event);
                this._eventsCache = this._eventsCache.filter(function (item) { return item !== event; });
            }
        };
        XKitReporter.prototype._scheduleReportEventsTask = function (immediate) {
            var _this = this;
            if (immediate === void 0) { immediate = false; }
            var execute = function () { return __awaiter(_this, void 0, void 0, function () {
                var groupByAppKey, _a, _b, _i, appKey, config;
                return __generator(this, function (_c) {
                    switch (_c.label) {
                        case 0:
                            groupByAppKey = this._eventsCache.reduce(function (acc, obj) {
                                var key = obj.appKey;
                                if (!acc[key]) {
                                    acc[key] = [];
                                }
                                acc[key].push(obj);
                                return acc;
                            }, {});
                            _a = [];
                            for (_b in groupByAppKey)
                                _a.push(_b);
                            _i = 0;
                            _c.label = 1;
                        case 1:
                            if (!(_i < _a.length)) return [3 /*break*/, 5];
                            appKey = _a[_i];
                            if (!!this._configMap.has(appKey)) return [3 /*break*/, 3];
                            return [4 /*yield*/, this.getConfig(appKey)];
                        case 2:
                            _c.sent();
                            _c.label = 3;
                        case 3:
                            if (this._configMap.has(appKey)) {
                                config = this._configMap.get(appKey);
                                if (!(config === null || config === void 0 ? void 0 : config.enabled)) {
                                    return [2 /*return*/];
                                }
                            }
                            this._reportEventsToServer(appKey, groupByAppKey[appKey]);
                            _c.label = 4;
                        case 4:
                            _i++;
                            return [3 /*break*/, 1];
                        case 5:
                            this._eventsCache = [];
                            return [2 /*return*/];
                    }
                });
            }); };
            if (immediate) {
                execute();
            }
            if (this._queueTimer) {
                return;
            }
            this._queueTimer = setInterval(function () {
                if (_this._eventsCache.length === 0) {
                    _this._queueTimer && clearInterval(_this._queueTimer);
                    _this._queueTimer = undefined;
                    return;
                }
                execute();
            }, EVENT_REPORT_INTERVAL);
        };
        XKitReporter.prototype._determineMaxRetry = function (events) {
            var e_1, _a;
            var retry = LOW_PRIORITY_RETRY;
            try {
                for (var events_1 = __values(events), events_1_1 = events_1.next(); !events_1_1.done; events_1_1 = events_1.next()) {
                    var event_1 = events_1_1.value;
                    if (event_1.priority === exports.EventPriority.HIGH) {
                        retry = HIGH_PRIORITY_RETRY;
                        break;
                    }
                    if (event_1.priority === exports.EventPriority.NORMAL) {
                        retry = NORMAL_PRIORITY_RETRY;
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (events_1_1 && !events_1_1.done && (_a = events_1.return)) _a.call(events_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
            return retry;
        };
        XKitReporter.prototype._reportEventsToServer = function (appKey, events) {
            return __awaiter(this, void 0, void 0, function () {
                var config, groupByEventId, maxRetry, retry, data, networkRequest;
                var _this = this;
                return __generator(this, function (_a) {
                    if (!this._configMap.has(appKey)) {
                        return [2 /*return*/];
                    }
                    config = this._configMap.get(appKey);
                    groupByEventId = events.reduce(function (acc, obj) {
                        var _a, _b, _c, _d;
                        if (((_a = config === null || config === void 0 ? void 0 : config.blacklist) === null || _a === void 0 ? void 0 : _a.length) > 0 &&
                            ((_b = config === null || config === void 0 ? void 0 : config.blacklist) === null || _b === void 0 ? void 0 : _b.includes(obj.component))) {
                            return acc;
                        }
                        //blacklist 不包含A，whitelist 为空 ： 允许 A 上报
                        if (((_c = config === null || config === void 0 ? void 0 : config.whitelist) === null || _c === void 0 ? void 0 : _c.length) > 0 &&
                            !((_d = config === null || config === void 0 ? void 0 : config.whitelist) === null || _d === void 0 ? void 0 : _d.includes(obj.component))) {
                            return acc;
                        }
                        var key = obj.eventId;
                        if (!acc[key]) {
                            acc[key] = [];
                        }
                        acc[key].push(__assign(__assign({}, obj.data), { appKey: obj.appKey, component: obj.component, version: obj.version, framework: obj.framework }));
                        return acc;
                    }, {});
                    maxRetry = this._determineMaxRetry(events);
                    retry = 0;
                    data = {
                        common: this.common,
                        event: groupByEventId,
                    };
                    networkRequest = function () {
                        request({
                            method: 'POST',
                            url: url,
                            headers: {
                                appkey: appKey,
                                sdktype: HEADER_VALUE_SDK_TYPE,
                                ver: HEADER_VALUE_REPORTER_VERSION,
                                'Content-Type': HEADER_VALUE_CONTENT_TYPE,
                            },
                            data: data,
                        }).catch(function () {
                            if (retry <= maxRetry) {
                                setTimeout(networkRequest, 2000 * retry);
                            }
                            else {
                                _this._logger.debug("Failed to report events to server after ".concat(retry, " retries."), data);
                            }
                            retry++;
                        });
                    };
                    networkRequest();
                    return [2 /*return*/];
                });
            });
        };
        XKitReporter.setAppInfo = function (info) {
            window.__XKitReporter__ = {
                packageId: info === null || info === void 0 ? void 0 : info.packageId,
                appName: info === null || info === void 0 ? void 0 : info.appName,
                appVer: info === null || info === void 0 ? void 0 : info.appVer,
            };
        };
        XKitReporter.getInstance = function (options) {
            if (!options) {
                if (!this.instance) {
                    throw new Error('XKitReporter not initialized');
                }
                return this.instance;
            }
            if (!this.instance) {
                this.instance = new XKitReporter(options);
            }
            return this.instance;
        };
        return XKitReporter;
    }());
    var XKitReporter$1 = XKitReporter;

    exports.EventStep = EventStep;
    exports.EventTracking = EventTracking$1;
    exports.IntervalEvent = IntervalEvent;
    exports.ReportEvent = ReportEvent;
    exports.Storage = index;
    exports.VisibilityObserver = VisibilityObserver$1;
    exports.XKitReporter = XKitReporter$1;
    exports.addUrlSearch = addUrlSearch;
    exports.createLoggerDecorator = createLoggerDecorator;
    exports.debounce = debounce;
    exports.frequencyControl = frequencyControl;
    exports.getBrowserInfo = getBrowserInfo;
    exports.getFileType = getFileType;
    exports.getOperatingSystem = getOperatingSystem;
    exports.logDebug = logDebug$1;
    exports.parseFileSize = parseFileSize;
    exports.request = request;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
