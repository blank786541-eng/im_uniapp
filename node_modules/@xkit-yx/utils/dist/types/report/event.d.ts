export declare enum EventPriority {
    LOW = 0,
    NORMAL = 1,
    HIGH = 2
}
export interface Event {
    eventId: string;
    priority: EventPriority;
    component: string;
    version: string;
    appKey: string;
    framework: string;
    data: any;
}
interface AppInfo {
    appKey: string;
    version: string;
    component: string;
    framework?: string;
}
interface ReportInitOptions {
    eventId: string;
    priority: EventPriority;
}
interface EndData {
    code: number;
    msg?: string;
    requestId?: string;
    serverCost?: number;
}
interface EndResultData {
    requestId?: string;
    serverCost?: number;
}
export declare class ReportEvent implements Event {
    appKey: string;
    component: string;
    data: any;
    eventId: string;
    framework: string;
    priority: EventPriority;
    version: string;
    private startTime;
    private endTime;
    private duration;
    constructor(options: ReportInitOptions);
    end(): void;
    setAppInfo(appInfo: AppInfo): void;
    endWith(data: EndData): void;
    endWithSuccess(data?: EndResultData): void;
    endWithFailure(data?: EndResultData): void;
    setParams(params: any): ReportEvent;
    addParams(params: any): ReportEvent;
    setData(data: any): void;
    setUserId(userId: string): void;
}
export declare class EventStep extends ReportEvent {
    constructor(options: ReportInitOptions);
}
export declare class IntervalEvent extends EventStep {
    private _stepMap;
    constructor(options: ReportInitOptions);
    beginStep(name: string): EventStep;
    addStep(data: EventStep): void;
    removeStep(eventId: string): void;
    endWith(data: EndData): void;
    endWithSuccess(data?: EndResultData): void;
    endWithFailure(data?: EndResultData): void;
    end(): void;
}
export {};
